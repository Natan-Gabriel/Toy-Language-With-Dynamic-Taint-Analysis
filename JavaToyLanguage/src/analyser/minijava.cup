package analyser;
import model.stmt.*;
import model.exp.*;
import model.types.*;
import model.values.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
parser code {:
    int count=1;
    static Map<Integer, IStmt> map = new HashMap<Integer, IStmt>();
  public boolean syntaxErrors;


  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }

  public static void main(String[] args) throws Exception {
        // initialize the symbol factory
        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        // create a buffering scanner wrapper
        ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(args[0])),csf));
        // start parsing
        Parser p = new Parser(lexer,csf);

        //XMLElement e = (XMLElement)p.parse().value;
        System.out.println("aici");
        System.out.println(p.parse().value);

        /*for (XMLElement el: SyntaxTreeXPath.query(args[2],e)){
        	  System.out.println(el.getTagname());
        }


        TestVisitor t = new TestVisitor();
        SyntaxTreeDFS.dfs(e,t);

        // create XML output file
        XMLOutputFactory outFactory = XMLOutputFactory.newInstance();
        XMLStreamWriter sw = outFactory.createXMLStreamWriter(new FileOutputStream(args[1]),"UTF-8");
        // dump XML output to the file
        XMLElement.dump(lexer,sw,e,"expr","stmt");

         // transform the parse tree into an AST and a rendered HTML version
        Transformer transformer = TransformerFactory.newInstance()
  	    .newTransformer(new StreamSource(new File("tree.xsl")));
        Source text = new StreamSource(new File(args[1]));
        transformer.transform(text, new StreamResult(new File("output.xml")));
        transformer = TransformerFactory.newInstance()
  	    .newTransformer(new StreamSource(new File("tree-view.xsl")));
        text = new StreamSource(new File("output.xml"));
        transformer.transform(text, new StreamResult(new File("ast.html"))); */
    }

    public static Object parse(String arg) throws Exception {
            // initialize the symbol factory
            ComplexSymbolFactory csf = new ComplexSymbolFactory();
            // create a buffering scanner wrapper
            ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(arg)),csf));
            // start parsing
            Parser p = new Parser(lexer,csf);

            //XMLElement e = (XMLElement)p.parse().value;
            System.out.println("aici");
            Object res=p.parse().value;
            System.out.println("res:"+res);
            return map;

        }


:};

terminal         SEMICOLON, COMMA, LPAR, RPAR, BEGIN, END,IF, ELSE, WHILE, READ, WRITE, BUNOP, ASSIGN, GOTO;
terminal Integer TYPE, UNOP, COMP, BBINOP, INTCONST;
terminal String  IDENT,STRINGCONST;
terminal char BINOPPRIORITY1, BINOPPRIORITY2;
terminal Boolean BOOLCONST;


non terminal String program;
non terminal String decllist;
non terminal String decl;
non terminal List<String> identlist;
non terminal Exp expr,logicexpr;
non terminal IStmt stmt;
non terminal List<IStmt> stmtlist;

precedence left BINOPPRIORITY2;
precedence left BINOPPRIORITY1;
precedence left ELSE, UNOP, BUNOP, BBINOP;


program   ::=  decllist:d stmtlist:s
    {: System.out.println("before"+map+"after");
     RESULT = d+s; :}
    ;
decllist  ::=  decl:d decllist:dl
    {:
    dl+=d; RESULT = dl;
    :}
    | /* empty decllist */
    {: RESULT = ""; :}
    ;

decl ::= TYPE IDENT:i identlist:il  SEMICOLON
    {: System.out.println(i) ;
    map.put(count,new VarDeclStmt(i,new IntType(),count,ixleft.getLine()));
    String res="";
    res+="{"+count+",new VarDeclStmt(\""+i+"\",new IntType(),"+count+","+ixleft.getLine()+")},";
    count++;
    for(String elem : il){
        map.put(count,new VarDeclStmt(elem,new IntType(),count,ixleft.getLine()));
        res+="{"+count+",new VarDeclStmt(\""+elem+"\",new IntType(),"+count+","+ixleft.getLine()+")},";
        count++;
    }

    RESULT = res; :}
    ;
identlist  ::= identlist:il COMMA IDENT:i
    {: il.add(i); RESULT = il; :}
     | /* empty identlist*/
     {: RESULT = new ArrayList<String>(); :}
    ;

stmtlist  ::= stmtlist:sl stmt:s
    {: sl.add(s); RESULT = sl; :}
    | /* empty stmtlist */
    {: RESULT = new ArrayList<IStmt>(); :}
    ;

stmt ::= SEMICOLON
    {: :}
    | IDENT:i ASSIGN expr:e SEMICOLON
    {: //System.out.println("new AssignStmt(\""+i+"\","+ e +","+count+","+ixleft.getLine()+")},";
     map.put(count,new AssignStmt(i,(Exp)e,count,ixleft.getLine()));
     RESULT = new AssignStmt(i,(Exp)e,count,ixleft.getLine());
     count++;
     :}
    | GOTO expr:e SEMICOLON
      {: //System.out.println("new AssignStmt(\""+i+"\","+ e +","+count+","+ixleft.getLine()+")},";
       map.put(count,new GotoStmt((Exp)e,count));
       RESULT = new GotoStmt((Exp)e,count);
       count++;
       :}
    | IF LPAR logicexpr:e RPAR BEGIN stmtlist:sl END
    {:  map.put(count,new IfStmt((Exp)e,sl,new ArrayList<IStmt>(),count));
        count++;
        RESULT = new IfStmt((Exp)e,sl,new ArrayList<IStmt>(),count); :}
    | IF LPAR logicexpr:e RPAR BEGIN stmtlist:sl1 END ELSE BEGIN stmtlist:sl2 END
    {: map.put(count,new IfStmt((Exp)e,sl1,sl2,count));
       count++;
       RESULT = new IfStmt((Exp)e,sl1,sl2,count); :}
    | error:e
    {: parser.report_error("Syntax error, skipped nonsense",e); :}
    ;

logicexpr ::= BOOLCONST:c
    {: RESULT = new ValueExp(new BoolValue(c));  :}
    | IDENT: i
    {: RESULT = new VarExp(i); :}
    ;

expr ::= INTCONST:c
    {: //System.out.println("new ValueExp(new IntValue("+c+")");
      //RESULT = "new ValueExp(new IntValue("+c+"))";
     RESULT = new ValueExp(new IntValue(c));  :}
    | IDENT: i
    {: RESULT = new VarExp(i); :}
    | LPAR expr:e RPAR
    {: RESULT = e;
     :}

    | expr:e1 BINOPPRIORITY1:op expr:e2
    {:  System.out.println("BINOP:op"+op);
    RESULT = new ArithExp(op,e1, e2);
    :}
    | expr:e1 BINOPPRIORITY2:op expr:e2
    {:  System.out.println("BINOP:op"+op);
    RESULT = new ArithExp(op,e1, e2);
    :}
    | BINOPPRIORITY2:op expr:e
    {:  System.out.println("BINOP:op"+op);
    if(op=='+')
        RESULT = e;
    else if(op=='-')
        RESULT = new ArithExp('*',e, new ValueExp(new IntValue(-1)));
    :}
    ;