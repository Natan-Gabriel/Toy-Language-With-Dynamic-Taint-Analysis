package analyser;
import model.stmt.*;
import model.exp.*;
import model.types.*;
import model.values.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
parser code {:

  public boolean syntaxErrors;


  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }

  public static void main(String[] args) throws Exception {
        // initialize the symbol factory
        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        // create a buffering scanner wrapper
        ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(args[0])),csf));
        // start parsing
        Parser p = new Parser(lexer,csf);

        //XMLElement e = (XMLElement)p.parse().value;
        System.out.println("aici");
        System.out.println(p.parse().value);
    }


    public synchronized static Object parse(String arg) throws Exception {
        // initialize the symbol factory
        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        // create a buffering scanner wrapper
        ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(arg)),csf));
        // start parsing
        Parser p = new Parser(lexer,csf);

        //XMLElement e = (XMLElement)p.parse().value;
        System.out.println("aici");
        Object res=p.parse().value;
        System.out.println("res:"+res+"res_printed");
        return res;

    }


:};

terminal         SEMICOLON, COMMA, LPAR, RPAR, BEGIN, END,IF, ELSE, WHILE, READ, WRITE, BUNOP, ASSIGN;
terminal Integer TYPE, BINOP, UNOP, COMP, BBINOP, INTCONST;
terminal String  IDENT,STRINGCONST;
terminal Boolean BOOLCONST;


non terminal IStmt program;
non terminal IStmt decllist,stmtlist;
non terminal IStmt decl,stmt;
non terminal List<String> identlist;
non terminal Exp expr;

precedence left ELSE, UNOP, BINOP, BUNOP, BBINOP;

program   ::=  decllist:d stmtlist:s
    {: RESULT = new CompStmt(d,s); :}
    ;
decllist  ::=  decl:d decllist:dl
    {:
    dl=new CompStmt(d,dl); RESULT = dl;
    :}
    | /* empty decllist */
    {: RESULT = new NopStmt(); :}
    ;

decl ::= TYPE IDENT:i identlist:il  SEMICOLON
    {: System.out.println(i) ;
    IStmt res=new NopStmt();
    for(String elem : il){
        res=new CompStmt(new VarDeclStmt(elem,new IntType(),ixleft.getLine()),res);
    }
    res=new CompStmt(new VarDeclStmt(i,new IntType(),ixleft.getLine()), res);
    RESULT = res; :}
    ;
identlist  ::= COMMA IDENT:i identlist:il
    {: il.add(i); RESULT = il; :}
     | /* empty identlist*/
     {: RESULT = new ArrayList<String>(); :}
    ;

stmtlist  ::= stmtlist:sl stmt:s
    {: sl=new CompStmt(sl,s); RESULT = sl; :}
    | /* empty stmtlist */
    {: RESULT = new NopStmt(); :}
    ;

stmt ::= SEMICOLON
    {: :}
    | IDENT:i ASSIGN expr:e SEMICOLON
    {: //System.out.println("new AssignStmt(\""+i+"\","+ e +","+ixleft.getLine()+")");
     RESULT = new AssignStmt(i,e,ixleft.getLine()); :}

    | error:e
    {: parser.report_error("Syntax error, skipped nonsense",e); :}
    ;

expr ::= INTCONST:c
    {: //System.out.println("new ValueExp(new IntValue("+c+")");
      RESULT = new ValueExp(new IntValue(c)); :}

    ;