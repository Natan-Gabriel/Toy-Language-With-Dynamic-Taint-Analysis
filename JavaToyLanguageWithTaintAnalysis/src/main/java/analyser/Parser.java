
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyser;

import model.stmt.*;
import model.exp.*;
import model.types.*;
import model.values.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
import javafx.util.Pair;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\010\006\000\002\005\005" +
    "\000\002\005\003\000\002\006\005\000\002\006\002\000" +
    "\002\004\004\000\002\004\002\000\002\007\003\000\002" +
    "\007\004\000\002\011\003\000\002\011\003\000\002\011" +
    "\006\000\002\011\011\000\002\011\011\000\002\011\015" +
    "\000\002\011\011\000\002\011\014\000\002\011\005\000" +
    "\002\011\007\000\002\011\011\000\002\011\007\000\002" +
    "\011\007\000\002\011\011\000\002\011\011\000\002\011" +
    "\003\000\002\013\003\000\002\013\005\000\002\014\003" +
    "\000\002\015\003\000\002\015\004\000\002\012\003\000" +
    "\002\012\005\000\002\012\005\000\002\012\003\000\002" +
    "\012\005\000\002\012\004\000\002\012\005\000\002\012" +
    "\003\000\002\012\003\000\002\012\006\000\002\012\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\044\002\ufff7\003\023\004\004\012\011\014" +
    "\010\015\026\020\020\021\017\022\016\024\022\027\007" +
    "\030\014\032\025\033\012\036\005\043\021\046\015\001" +
    "\002\000\066\002\ufff4\003\ufff4\004\ufff4\006\ufff4\007\ufff4" +
    "\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\024\ufff4\027\ufff4\030\ufff4\032\ufff4" +
    "\033\ufff4\035\ufff4\036\ufff4\037\ufff4\043\ufff4\044\ufff4\045" +
    "\ufff4\046\ufff4\001\002\000\004\026\ufff6\001\002\000\066" +
    "\002\ufff3\003\ufff3\004\ufff3\006\ufff3\007\ufff3\011\ufff3\012" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\024\ufff3\027\ufff3\030\ufff3\032\ufff3\033\ufff3\035" +
    "\ufff3\036\ufff3\037\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3" +
    "\001\002\000\024\006\035\016\040\017\046\035\045\036" +
    "\032\037\034\043\044\044\043\045\036\001\002\000\004" +
    "\006\172\001\002\000\004\006\160\001\002\000\004\006" +
    "\152\001\002\000\004\002\151\001\002\000\004\006\143" +
    "\001\002\000\004\036\132\001\002\000\004\006\126\001" +
    "\002\000\004\006\120\001\002\000\004\006\114\001\002" +
    "\000\006\036\005\043\021\001\002\000\004\006\107\001" +
    "\002\000\066\002\uffe5\003\uffe5\004\uffe5\006\uffe5\007\uffe5" +
    "\011\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\024\uffe5\027\uffe5\030\uffe5\032\uffe5" +
    "\033\uffe5\035\uffe5\036\uffe5\037\uffe5\043\uffe5\044\uffe5\045" +
    "\uffe5\046\uffe5\001\002\000\004\002\001\001\002\000\004" +
    "\006\101\001\002\000\004\006\070\001\002\000\046\002" +
    "\ufff7\003\023\004\004\011\ufff7\012\011\014\010\015\026" +
    "\020\020\021\017\022\016\024\022\027\007\030\014\032" +
    "\025\033\012\036\005\043\021\046\015\001\002\000\004" +
    "\026\031\001\002\000\024\006\035\016\040\017\046\035" +
    "\045\036\032\037\034\043\044\044\043\045\036\001\002" +
    "\000\020\004\uffe1\005\uffe1\007\uffe1\040\uffe1\041\uffe1\043" +
    "\uffe1\044\uffe1\001\002\000\020\004\uffd8\005\uffd8\007\uffd8" +
    "\040\uffd8\041\uffd8\043\uffd8\044\uffd8\001\002\000\020\004" +
    "\uffe2\005\uffe2\007\uffe2\040\uffe2\041\uffe2\043\uffe2\044\uffe2" +
    "\001\002\000\024\006\035\016\040\017\046\035\045\036" +
    "\032\037\034\043\044\044\043\045\036\001\002\000\020" +
    "\004\uffe4\005\uffe4\007\uffe4\040\uffe4\041\uffe4\043\uffe4\044" +
    "\uffe4\001\002\000\020\004\uffdc\005\uffdc\007\uffdc\040\uffdc" +
    "\041\uffdc\043\uffdc\044\uffdc\001\002\000\020\004\uffd7\005" +
    "\uffd7\007\uffd7\040\uffd7\041\uffd7\043\uffd7\044\uffd7\001\002" +
    "\000\020\004\uffd5\005\uffd5\007\uffd5\040\uffd5\041\uffd5\043" +
    "\uffd5\044\uffd5\001\002\000\014\004\064\040\051\041\054" +
    "\043\053\044\052\001\002\000\024\006\035\016\040\017" +
    "\046\035\045\036\032\037\034\043\044\044\043\045\036" +
    "\001\002\000\006\036\032\043\044\001\002\000\020\004" +
    "\uffdf\005\uffdf\007\uffdf\040\uffdf\041\uffdf\043\uffdf\044\uffdf" +
    "\001\002\000\004\006\047\001\002\000\024\006\035\016" +
    "\040\017\046\035\045\036\032\037\034\043\044\044\043" +
    "\045\036\001\002\000\014\007\055\040\051\041\054\043" +
    "\053\044\052\001\002\000\024\006\035\016\040\017\046" +
    "\035\045\036\032\037\034\043\044\044\043\045\036\001" +
    "\002\000\024\006\035\016\040\017\046\035\045\036\032" +
    "\037\034\043\044\044\043\045\036\001\002\000\024\006" +
    "\035\016\040\017\046\035\045\036\032\037\034\043\044" +
    "\044\043\045\036\001\002\000\024\006\035\016\040\017" +
    "\046\035\045\036\032\037\034\043\044\044\043\045\036" +
    "\001\002\000\020\004\uffd6\005\uffd6\007\uffd6\040\uffd6\041" +
    "\uffd6\043\uffd6\044\uffd6\001\002\000\020\004\uffd9\005\uffd9" +
    "\007\uffd9\040\uffd9\041\uffd9\043\uffd9\044\uffd9\001\002\000" +
    "\020\004\uffdd\005\uffdd\007\uffdd\040\uffdd\041\054\043\uffdd" +
    "\044\uffdd\001\002\000\020\004\uffdb\005\uffdb\007\uffdb\040" +
    "\uffdb\041\054\043\053\044\uffdb\001\002\000\020\004\uffe3" +
    "\005\uffe3\007\uffe3\040\uffe3\041\054\043\053\044\052\001" +
    "\002\000\020\004\uffe0\005\uffe0\007\uffe0\040\uffe0\041\uffe0" +
    "\043\uffe0\044\uffe0\001\002\000\020\004\uffda\005\uffda\007" +
    "\uffda\040\uffda\041\054\043\053\044\uffda\001\002\000\066" +
    "\002\ufff2\003\ufff2\004\ufff2\006\ufff2\007\ufff2\011\ufff2\012" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\024\ufff2\027\ufff2\030\ufff2\032\ufff2\033\ufff2\035" +
    "\ufff2\036\ufff2\037\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2" +
    "\001\002\000\014\007\066\040\051\041\054\043\053\044" +
    "\052\001\002\000\020\004\uffde\005\uffde\007\uffde\040\uffde" +
    "\041\uffde\043\uffde\044\uffde\001\002\000\006\002\ufff8\011" +
    "\ufff8\001\002\000\042\003\023\004\004\012\011\014\010" +
    "\015\026\020\020\021\017\022\016\024\022\027\007\030" +
    "\014\032\025\033\012\036\005\043\021\046\015\001\002" +
    "\000\024\006\035\016\040\017\046\035\045\036\032\037" +
    "\034\043\044\044\043\045\036\001\002\000\014\004\073" +
    "\040\051\041\054\043\053\044\052\001\002\000\042\003" +
    "\023\004\004\012\011\014\010\015\026\020\020\021\017" +
    "\022\016\024\022\027\007\030\014\032\025\033\012\036" +
    "\005\043\021\046\015\001\002\000\004\007\075\001\002" +
    "\000\004\010\076\001\002\000\044\003\023\004\004\011" +
    "\ufff7\012\011\014\010\015\026\020\020\021\017\022\016" +
    "\024\022\027\007\030\014\032\025\033\012\036\005\043" +
    "\021\046\015\001\002\000\004\011\100\001\002\000\066" +
    "\002\uffed\003\uffed\004\uffed\006\uffed\007\uffed\011\uffed\012" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\024\uffed\027\uffed\030\uffed\032\uffed\033\uffed\035" +
    "\uffed\036\uffed\037\uffed\043\uffed\044\uffed\045\uffed\046\uffed" +
    "\001\002\000\004\036\102\001\002\000\004\005\103\001" +
    "\002\000\024\006\035\016\040\017\046\035\045\036\032" +
    "\037\034\043\044\044\043\045\036\001\002\000\014\007" +
    "\105\040\051\041\054\043\053\044\052\001\002\000\004" +
    "\004\106\001\002\000\066\002\ufff1\003\ufff1\004\ufff1\006" +
    "\ufff1\007\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1\027\ufff1\030" +
    "\ufff1\032\ufff1\033\ufff1\035\ufff1\036\ufff1\037\ufff1\043\ufff1" +
    "\044\ufff1\045\ufff1\046\ufff1\001\002\000\024\006\035\016" +
    "\040\017\046\035\045\036\032\037\034\043\044\044\043" +
    "\045\036\001\002\000\014\007\111\040\051\041\054\043" +
    "\053\044\052\001\002\000\004\004\112\001\002\000\066" +
    "\002\uffe8\003\uffe8\004\uffe8\006\uffe8\007\uffe8\011\uffe8\012" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\024\uffe8\027\uffe8\030\uffe8\032\uffe8\033\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8" +
    "\001\002\000\004\026\ufff5\001\002\000\024\006\035\016" +
    "\040\017\046\035\045\036\032\037\034\043\044\044\043" +
    "\045\036\001\002\000\014\007\116\040\051\041\054\043" +
    "\053\044\052\001\002\000\004\004\117\001\002\000\066" +
    "\002\uffeb\003\uffeb\004\uffeb\006\uffeb\007\uffeb\011\uffeb\012" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\024\uffeb\027\uffeb\030\uffeb\032\uffeb\033\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb" +
    "\001\002\000\024\006\035\016\040\017\046\035\045\036" +
    "\032\037\034\043\044\044\043\045\036\001\002\000\014" +
    "\005\122\040\051\041\054\043\053\044\052\001\002\000" +
    "\004\036\123\001\002\000\004\007\124\001\002\000\004" +
    "\004\125\001\002\000\066\002\uffea\003\uffea\004\uffea\006" +
    "\uffea\007\uffea\011\uffea\012\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\024\uffea\027\uffea\030" +
    "\uffea\032\uffea\033\uffea\035\uffea\036\uffea\037\uffea\043\uffea" +
    "\044\uffea\045\uffea\046\uffea\001\002\000\024\006\035\016" +
    "\040\017\046\035\045\036\032\037\034\043\044\044\043" +
    "\045\036\001\002\000\014\007\130\040\051\041\054\043" +
    "\053\044\052\001\002\000\004\004\131\001\002\000\066" +
    "\002\uffe9\003\uffe9\004\uffe9\006\uffe9\007\uffe9\011\uffe9\012" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\024\uffe9\027\uffe9\030\uffe9\032\uffe9\033\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\001\002\000\010\004\ufffb\005\ufffb\026\141\001\002\000" +
    "\006\004\ufff9\005\134\001\002\000\004\036\132\001\002" +
    "\000\004\004\136\001\002\000\066\002\ufffd\003\ufffd\004" +
    "\ufffd\006\ufffd\007\ufffd\011\ufffd\012\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\024\ufffd\027" +
    "\ufffd\030\ufffd\032\ufffd\033\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\043\ufffd\044\ufffd\045\ufffd\046\ufffd\001\002\000\006\004" +
    "\ufff9\005\134\001\002\000\004\004\ufffa\001\002\000\024" +
    "\006\035\016\040\017\046\035\045\036\032\037\034\043" +
    "\044\044\043\045\036\001\002\000\016\004\ufffc\005\ufffc" +
    "\040\051\041\054\043\053\044\052\001\002\000\004\036" +
    "\144\001\002\000\004\005\145\001\002\000\024\006\035" +
    "\016\040\017\046\035\045\036\032\037\034\043\044\044" +
    "\043\045\036\001\002\000\014\007\147\040\051\041\054" +
    "\043\053\044\052\001\002\000\004\004\150\001\002\000" +
    "\066\002\uffe6\003\uffe6\004\uffe6\006\uffe6\007\uffe6\011\uffe6" +
    "\012\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\024\uffe6\027\uffe6\030\uffe6\032\uffe6\033\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\043\uffe6\044\uffe6\045\uffe6\046" +
    "\uffe6\001\002\000\004\002\000\001\002\000\024\006\035" +
    "\016\040\017\046\035\045\036\032\037\034\043\044\044" +
    "\043\045\036\001\002\000\014\005\154\040\051\041\054" +
    "\043\053\044\052\001\002\000\024\006\035\016\040\017" +
    "\046\035\045\036\032\037\034\043\044\044\043\045\036" +
    "\001\002\000\014\007\156\040\051\041\054\043\053\044" +
    "\052\001\002\000\004\004\157\001\002\000\066\002\uffe7" +
    "\003\uffe7\004\uffe7\006\uffe7\007\uffe7\011\uffe7\012\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\024\uffe7\027\uffe7\030\uffe7\032\uffe7\033\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\001\002" +
    "\000\024\006\035\016\040\017\046\035\045\036\032\037" +
    "\034\043\044\044\043\045\036\001\002\000\014\007\162" +
    "\040\051\041\054\043\053\044\052\001\002\000\004\010" +
    "\163\001\002\000\044\003\023\004\004\011\ufff7\012\011" +
    "\014\010\015\026\020\020\021\017\022\016\024\022\027" +
    "\007\030\014\032\025\033\012\036\005\043\021\046\015" +
    "\001\002\000\004\011\165\001\002\000\070\002\ufff0\003" +
    "\ufff0\004\ufff0\006\ufff0\007\ufff0\011\ufff0\012\ufff0\013\166" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\024\ufff0\027\ufff0\030\ufff0\032\ufff0\033\ufff0\035\ufff0" +
    "\036\ufff0\037\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\001" +
    "\002\000\004\010\167\001\002\000\044\003\023\004\004" +
    "\011\ufff7\012\011\014\010\015\026\020\020\021\017\022" +
    "\016\024\022\027\007\030\014\032\025\033\012\036\005" +
    "\043\021\046\015\001\002\000\004\011\171\001\002\000" +
    "\066\002\uffef\003\uffef\004\uffef\006\uffef\007\uffef\011\uffef" +
    "\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\024\uffef\027\uffef\030\uffef\032\uffef\033\uffef" +
    "\035\uffef\036\uffef\037\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\001\002\000\024\006\035\016\040\017\046\035\045" +
    "\036\032\037\034\043\044\044\043\045\036\001\002\000" +
    "\014\007\174\040\051\041\054\043\053\044\052\001\002" +
    "\000\004\010\175\001\002\000\044\003\023\004\004\011" +
    "\ufff7\012\011\014\010\015\026\020\020\021\017\022\016" +
    "\024\022\027\007\030\014\032\025\033\012\036\005\043" +
    "\021\046\015\001\002\000\004\011\177\001\002\000\066" +
    "\002\uffee\003\uffee\004\uffee\006\uffee\007\uffee\011\uffee\012" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\024\uffee\027\uffee\030\uffee\032\uffee\033\uffee\035" +
    "\uffee\036\uffee\037\uffee\043\uffee\044\uffee\045\uffee\046\uffee" +
    "\001\002\000\014\004\201\040\051\041\054\043\053\044" +
    "\052\001\002\000\066\002\uffec\003\uffec\004\uffec\006\uffec" +
    "\007\uffec\011\uffec\012\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\024\uffec\027\uffec\030\uffec" +
    "\032\uffec\033\uffec\035\uffec\036\uffec\037\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\014\002\012\004\023\007\027\010\005\011" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\177\013\032\014\040\015\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\066\007\027\010\005\011\026\001\001\000" +
    "\002\001\001\000\012\012\041\013\032\014\040\015\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\064\013\032\014\040\015\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\062\013\032" +
    "\014\040\015\036\001\001\000\004\015\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\047\013\032" +
    "\014\040\015\036\001\001\000\002\001\001\000\012\012" +
    "\060\013\032\014\040\015\036\001\001\000\012\012\057" +
    "\013\032\014\040\015\036\001\001\000\012\012\056\013" +
    "\032\014\040\015\036\001\001\000\012\012\055\013\032" +
    "\014\040\015\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\027\010\005\011\070\001\001\000\012\012\071\013" +
    "\032\014\040\015\036\001\001\000\002\001\001\000\010" +
    "\007\027\010\005\011\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\076\007\027\010\005\011\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\103\013\032\014\040" +
    "\015\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\107\013\032\014\040\015\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\114\013\032\014\040" +
    "\015\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\120\013\032\014\040\015\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\126" +
    "\013\032\014\040\015\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\134\001\001\000\004\005\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\137\001\001\000\002" +
    "\001\001\000\012\012\141\013\032\014\040\015\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\145\013\032\014\040\015\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\152\013\032\014\040\015\036\001" +
    "\001\000\002\001\001\000\012\012\154\013\032\014\040" +
    "\015\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\160\013\032\014\040\015\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\163\007\027\010\005\011\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\167\007" +
    "\027\010\005\011\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\172\013\032\014\040\015\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\175" +
    "\007\027\010\005\011\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public boolean syntaxErrors;


  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }

  public static void main(String[] args) throws Exception {
        // initialize the symbol factory
        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        // create a buffering scanner wrapper
        ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(args[0])),csf));
        // start parsing
        Parser p = new Parser(lexer,csf);

        //XMLElement e = (XMLElement)p.parse().value;
        System.out.println("aici");
        System.out.println(p.parse().value);
    }


    public synchronized static Object parse(String arg) throws Exception {
        // initialize the symbol factory
        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        // create a buffering scanner wrapper
        ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(arg)),csf));
        // start parsing
        Parser p = new Parser(lexer,csf);

        //XMLElement e = (XMLElement)p.parse().value;
        //System.out.println("aici");
        Object res=p.parse().value;
        //System.out.println("res:"+res+"res_printed");
        return res;

    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtlist 
            {
              IStmt RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IStmt s = (IStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IStmt start_val = (IStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decllist ::= decl decllist 
            {
              IStmt RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IStmt d = (IStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IStmt dl = (IStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    dl=new CompStmt(d,dl); RESULT = dl;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decllist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decllist ::= 
            {
              IStmt RESULT =null;
		 RESULT = new NopStmt(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decllist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= TYPE assignment identlist SEMICOLON 
            {
              IStmt RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Pair<String,Exp> i = (Pair<String,Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Pair<String,Exp>> il = (List<Pair<String,Exp>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 //System.out.println(i) ;
    IStmt res=new NopStmt();
    for(Pair<String,Exp> elem : il){
        res=new CompStmt(new VarDeclStmt(elem.getKey(),type,typexleft.getLine()),res);
        if(elem.getValue()!=null){
            res=new CompStmt(new AssignStmt(elem.getKey(),elem.getValue(),typexleft.getLine()),res);
        }
    }
    res=new CompStmt(new VarDeclStmt(i.getKey(),type,typexleft.getLine()),res);
    if(i.getValue()!=null){
        res=new CompStmt(new AssignStmt(i.getKey(),i.getValue(),typexleft.getLine()),res);
    }
    RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // assignment ::= IDENT ASSIGN expr 
            {
              Pair<String,Exp> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
     RESULT = new Pair<String,Exp>(i,e);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // assignment ::= IDENT 
            {
              Pair<String,Exp> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new Pair<String,Exp>(i,null);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // identlist ::= COMMA assignment identlist 
            {
              List<Pair<String,Exp>> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Pair<String,Exp> i = (Pair<String,Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Pair<String,Exp>> il = (List<Pair<String,Exp>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 il.add(i); RESULT = il; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identlist",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // identlist ::= 
            {
              List<Pair<String,Exp>> RESULT =null;
		 RESULT = new ArrayList<Pair<String,Exp>>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identlist",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmtlist ::= stmt stmtlist 
            {
              IStmt RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IStmt s = (IStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IStmt sl = (IStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sl=new CompStmt(s,sl); RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmtlist ::= 
            {
              IStmt RESULT =null;
		 RESULT = new NopStmt(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // write_heap ::= IDENT 
            {
              Pair<Integer,String> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 int count = 0; RESULT = new Pair<Integer,String>(0,i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_heap",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // write_heap ::= BINOPPRIORITY1 write_heap 
            {
              Pair<Integer,String> RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		char op = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<Integer,String> i = (Pair<Integer,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(op=='*')
                RESULT = new Pair<Integer,String>(i.getKey()+1,i.getValue());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_heap",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= SEMICOLON 
            {
              IStmt RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NopStmt(sxleft.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= decl 
            {
              IStmt RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IStmt d = (IStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT=d;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= write_heap ASSIGN expr SEMICOLON 
            {
              IStmt RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<Integer,String> i = (Pair<Integer,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 //System.out.println("new AssignStmt(\""+i+"\","+ e +","+ixleft.getLine()+")");
     int references = i.getKey();
     String identifier = i.getValue();
     if(references==0)
        RESULT = new AssignStmt(identifier,e,ixleft.getLine());
     else
        RESULT = new wH(identifier,e,references,ixleft.getLine());
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= WRITE_HEAP LPAR IDENT COMMA expr RPAR SEMICOLON 
            {
              IStmt RESULT =null;
		Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 //System.out.println("new AssignStmt(\""+i+"\","+ e +","+ixleft.getLine()+")");
         RESULT = new wH(i,e,1,wxleft.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= IF LPAR expr RPAR BEGIN stmtlist END 
            {
              IStmt RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location sl1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sl1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IStmt sl1 = (IStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location endxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location endxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = new IfStmt((Exp)e,sl1,new NopStmt(),sxleft.getLine(),endxright.getLine());
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= IF LPAR expr RPAR BEGIN stmtlist END ELSE BEGIN stmtlist END 
            {
              IStmt RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		Location sl1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location sl1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		IStmt sl1 = (IStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location sl2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sl2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IStmt sl2 = (IStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location endxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location endxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new IfStmt((Exp)e,sl1,sl2,sxleft.getLine(),endxright.getLine());
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= WHILE LPAR expr RPAR BEGIN stmtlist END 
            {
              IStmt RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IStmt sl = (IStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location endxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location endxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.out.println("exleft.getLine()"+exleft.getLine());
        System.out.println("exright.getLine()"+exright.getLine());
        System.out.println("slxleft.getLine()"+slxleft.getLine());
        System.out.println("slxright.getLine()"+slxright.getLine());
        RESULT = new WhileStmt(e,sl,sxleft.getLine(),endxright.getLine());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= FOR LPAR stmt expr SEMICOLON stmt RPAR BEGIN stmtlist END 
            {
              IStmt RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		IStmt s1 = (IStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location s3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location s3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		IStmt s3 = (IStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IStmt sl = (IStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location endxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location endxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
     RESULT = new CompStmt(s1,new WhileStmt((Exp)e,new CompStmt(sl,s3),sxleft.getLine(),endxright.getLine()));
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= GOTO expr SEMICOLON 
            {
              IStmt RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
          RESULT = new GotoStmt((Exp)e,sxleft.getLine());
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= OPEN_FILE LPAR expr RPAR SEMICOLON 
            {
              IStmt RESULT =null;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
      RESULT = new OpenRFile((Exp)e,oxleft.getLine());
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= READ_FILE LPAR expr COMMA IDENT RPAR SEMICOLON 
            {
              IStmt RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
      RESULT = new readFile((Exp)e,i,rxleft.getLine());
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= CLOSE_FILE LPAR expr RPAR SEMICOLON 
            {
              IStmt RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
       RESULT = new closeRFile((Exp)e,cxleft.getLine());
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= PRINT LPAR expr RPAR SEMICOLON 
            {
              IStmt RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
       RESULT = new PrintStmt((Exp)e,sxleft.getLine());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= CHANGE_STATUS LPAR expr COMMA expr RPAR SEMICOLON 
            {
              IStmt RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
       RESULT = new changeStatus((Exp)e1,(Exp)e2,cxleft.getLine());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= ALLOCATE_AT LPAR IDENT COMMA expr RPAR SEMICOLON 
            {
              IStmt RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
       RESULT = new New(i,(Exp)e,sxleft.getLine());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= error 
            {
              IStmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.report_error("Syntax error, skipped nonsense",e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // logicexpr ::= BOOLCONST 
            {
              Exp RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //System.out.println("BOOLCONST");
         RESULT = new ValueExp(new BoolValue(c));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicexpr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // logicexpr ::= expr COMP expr 
            {
              Exp RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //System.out.println("COMP");
        RESULT = new RelationalExp(op,e1,e2); //RelationalExp
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicexpr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stringexp ::= STRINGCONST 
            {
              Exp RESULT =null;
		Location scxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location scxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //System.out.println("STRINGCONST");
      RESULT = new ValueExp(new StringValue(sc));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringexp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // identifier ::= IDENT 
            {
              Exp RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarExp(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // identifier ::= BINOPPRIORITY1 identifier 
            {
              Exp RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		char op = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(op=='*')
                RESULT = new rH(i);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= INTCONST 
            {
              Exp RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //System.out.println("new ValueExp(new IntValue("+c+")");
      RESULT = new ValueExp(new IntValue(c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= LPAR expr RPAR 
            {
              Exp RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr BINOPPRIORITY1 expr 
            {
              Exp RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		char op = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  //System.out.println("BINOP:op"+op);
        RESULT = new ArithExp(op,e1, e2);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= identifier 
            {
              Exp RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr BINOPPRIORITY2 expr 
            {
              Exp RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		char op = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  //System.out.println("new ArithExp("+op+","+e1+","+ e2+")");
        RESULT = new ArithExp(op,e1, e2);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= BINOPPRIORITY2 expr 
            {
              Exp RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		char op = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  //System.out.println("BINOP:op"+op);
    if(op=='+')
        RESULT = e;
    else if(op=='-')
        RESULT = new ArithExp('*',e, new ValueExp(new IntValue(-1)));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr BBINOP expr 
            {
              Exp RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicExp(op,e1,e2); //LogicExp
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= logicexpr 
            {
              Exp RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      //System.out.println("BOOLCONST");
         RESULT = l;
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= READ_INTEGER 
            {
              Exp RESULT =null;
		
      RESULT = new readInteger();
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= READ_HEAP LPAR expr RPAR 
            {
              Exp RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new rH(e);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= stringexp 
            {
              Exp RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //System.out.println("stringexp");
        RESULT = s;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
