
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyser;

import model.stmt.*;
import model.exp.*;
import model.types.*;
import model.values.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
import javafx.util.Pair;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\014\006\000\002\004\005" +
    "\000\002\004\003\000\002\005\005\000\002\005\002\000" +
    "\002\015\004\000\002\015\002\000\002\013\003\000\002" +
    "\013\003\000\002\013\006\000\002\013\011\000\002\013" +
    "\015\000\002\013\011\000\002\013\014\000\002\013\007" +
    "\000\002\013\003\000\002\007\003\000\002\007\005\000" +
    "\002\012\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\004\000\002\006\005\000\002\006\003\000\002\006\003" +
    "\000\002\006\006\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\024\002\ufff7\003\ufff7\004\ufff7\012\ufff7\014" +
    "\ufff7\015\ufff7\024\ufff7\030\ufff7\033\ufff7\001\002\000\024" +
    "\002\001\003\015\004\017\012\013\014\007\015\011\024" +
    "\020\030\014\033\010\001\002\000\004\002\006\001\002" +
    "\000\004\002\000\001\002\000\004\006\113\001\002\000" +
    "\004\026\110\001\002\000\004\006\077\001\002\000\026" +
    "\002\ufff8\003\ufff8\004\ufff8\011\ufff8\012\ufff8\014\ufff8\015" +
    "\ufff8\024\ufff8\030\ufff8\033\ufff8\001\002\000\004\006\065" +
    "\001\002\000\004\033\055\001\002\000\046\002\uffee\003" +
    "\uffee\004\uffee\006\uffee\007\uffee\011\uffee\012\uffee\014\uffee" +
    "\015\uffee\016\uffee\017\uffee\024\uffee\030\uffee\032\uffee\033" +
    "\uffee\034\uffee\040\uffee\041\uffee\001\002\000\046\002\ufff5" +
    "\003\ufff5\004\ufff5\006\ufff5\007\ufff5\011\ufff5\012\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\024\ufff5\030\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\040\ufff5\041\ufff5\001\002\000\046\002" +
    "\ufff6\003\ufff6\004\ufff6\006\ufff6\007\ufff6\011\ufff6\012\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\017\ufff6\024\ufff6\030\ufff6\032" +
    "\ufff6\033\ufff6\034\ufff6\040\ufff6\041\ufff6\001\002\000\004" +
    "\006\021\001\002\000\022\006\025\016\027\017\034\032" +
    "\033\033\022\034\024\040\032\041\026\001\002\000\020" +
    "\004\uffe9\005\uffe9\007\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\001\002\000\020\004\uffe3\005\uffe3\007\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\001\002\000\020\004\uffeb\005" +
    "\uffeb\007\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\001\002" +
    "\000\022\006\025\016\027\017\034\032\033\033\022\034" +
    "\024\040\032\041\026\001\002\000\020\004\uffed\005\uffed" +
    "\007\uffed\035\uffed\036\uffed\037\uffed\040\uffed\001\002\000" +
    "\020\004\uffe2\005\uffe2\007\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\001\002\000\020\004\uffe0\005\uffe0\007\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\001\002\000\014\007\051" +
    "\035\037\036\042\037\041\040\040\001\002\000\022\006" +
    "\025\016\027\017\034\032\033\033\022\034\024\040\032" +
    "\041\026\001\002\000\020\004\uffea\005\uffea\007\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\001\002\000\004\006\035" +
    "\001\002\000\022\006\025\016\027\017\034\032\033\033" +
    "\022\034\024\040\032\041\026\001\002\000\014\007\043" +
    "\035\037\036\042\037\041\040\040\001\002\000\022\006" +
    "\025\016\027\017\034\032\033\033\022\034\024\040\032" +
    "\041\026\001\002\000\022\006\025\016\027\017\034\032" +
    "\033\033\022\034\024\040\032\041\026\001\002\000\022" +
    "\006\025\016\027\017\034\032\033\033\022\034\024\040" +
    "\032\041\026\001\002\000\022\006\025\016\027\017\034" +
    "\032\033\033\022\034\024\040\032\041\026\001\002\000" +
    "\020\004\uffe1\005\uffe1\007\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\001\002\000\020\004\uffe4\005\uffe4\007\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\001\002\000\020\004\uffe7" +
    "\005\uffe7\007\uffe7\035\uffe7\036\042\037\uffe7\040\uffe7\001" +
    "\002\000\020\004\uffe6\005\uffe6\007\uffe6\035\uffe6\036\042" +
    "\037\041\040\uffe6\001\002\000\020\004\uffec\005\uffec\007" +
    "\uffec\035\uffec\036\042\037\041\040\040\001\002\000\020" +
    "\004\uffe5\005\uffe5\007\uffe5\035\uffe5\036\042\037\041\040" +
    "\uffe5\001\002\000\004\004\052\001\002\000\046\002\uffef" +
    "\003\uffef\004\uffef\006\uffef\007\uffef\011\uffef\012\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\024\uffef\030\uffef\032\uffef" +
    "\033\uffef\034\uffef\040\uffef\041\uffef\001\002\000\014\007" +
    "\054\035\037\036\042\037\041\040\040\001\002\000\020" +
    "\004\uffe8\005\uffe8\007\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\001\002\000\010\004\ufffb\005\ufffb\026\063\001\002" +
    "\000\006\004\ufff9\005\ufff9\001\002\000\006\004\061\005" +
    "\060\001\002\000\004\033\055\001\002\000\046\002\ufffd" +
    "\003\ufffd\004\ufffd\006\ufffd\007\ufffd\011\ufffd\012\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\024\ufffd\030\ufffd\032\ufffd" +
    "\033\ufffd\034\ufffd\040\ufffd\041\ufffd\001\002\000\006\004" +
    "\ufffa\005\ufffa\001\002\000\022\006\025\016\027\017\034" +
    "\032\033\033\022\034\024\040\032\041\026\001\002\000" +
    "\016\004\ufffc\005\ufffc\035\037\036\042\037\041\040\040" +
    "\001\002\000\022\006\025\016\027\017\034\032\033\033" +
    "\022\034\024\040\032\041\026\001\002\000\014\007\067" +
    "\035\037\036\042\037\041\040\040\001\002\000\004\010" +
    "\070\001\002\000\024\003\ufff7\004\ufff7\011\ufff7\012\ufff7" +
    "\014\ufff7\015\ufff7\024\ufff7\030\ufff7\033\ufff7\001\002\000" +
    "\024\003\015\004\017\011\072\012\013\014\007\015\011" +
    "\024\020\030\014\033\010\001\002\000\050\002\ufff3\003" +
    "\ufff3\004\ufff3\006\ufff3\007\ufff3\011\ufff3\012\ufff3\013\073" +
    "\014\ufff3\015\ufff3\016\ufff3\017\ufff3\024\ufff3\030\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\040\ufff3\041\ufff3\001\002\000\004" +
    "\010\074\001\002\000\024\003\ufff7\004\ufff7\011\ufff7\012" +
    "\ufff7\014\ufff7\015\ufff7\024\ufff7\030\ufff7\033\ufff7\001\002" +
    "\000\024\003\015\004\017\011\076\012\013\014\007\015" +
    "\011\024\020\030\014\033\010\001\002\000\046\002\ufff2" +
    "\003\ufff2\004\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\024\ufff2\030\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\040\ufff2\041\ufff2\001\002\000\022\003" +
    "\015\004\017\012\013\014\007\015\011\024\020\030\014" +
    "\033\010\001\002\000\022\006\025\016\027\017\034\032" +
    "\033\033\022\034\024\040\032\041\026\001\002\000\014" +
    "\004\102\035\037\036\042\037\041\040\040\001\002\000" +
    "\022\003\015\004\017\012\013\014\007\015\011\024\020" +
    "\030\014\033\010\001\002\000\004\007\104\001\002\000" +
    "\004\010\105\001\002\000\024\003\ufff7\004\ufff7\011\ufff7" +
    "\012\ufff7\014\ufff7\015\ufff7\024\ufff7\030\ufff7\033\ufff7\001" +
    "\002\000\024\003\015\004\017\011\107\012\013\014\007" +
    "\015\011\024\020\030\014\033\010\001\002\000\046\002" +
    "\ufff0\003\ufff0\004\ufff0\006\ufff0\007\ufff0\011\ufff0\012\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\024\ufff0\030\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\040\ufff0\041\ufff0\001\002\000\022" +
    "\006\025\016\027\017\034\032\033\033\022\034\024\040" +
    "\032\041\026\001\002\000\014\004\112\035\037\036\042" +
    "\037\041\040\040\001\002\000\046\002\ufff4\003\ufff4\004" +
    "\ufff4\006\ufff4\007\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4" +
    "\016\ufff4\017\ufff4\024\ufff4\030\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\040\ufff4\041\ufff4\001\002\000\022\006\025\016\027" +
    "\017\034\032\033\033\022\034\024\040\032\041\026\001" +
    "\002\000\014\007\115\035\037\036\042\037\041\040\040" +
    "\001\002\000\004\010\116\001\002\000\024\003\ufff7\004" +
    "\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7\024\ufff7\030\ufff7" +
    "\033\ufff7\001\002\000\024\003\015\004\017\011\120\012" +
    "\013\014\007\015\011\024\020\030\014\033\010\001\002" +
    "\000\046\002\ufff1\003\ufff1\004\ufff1\006\ufff1\007\ufff1\011" +
    "\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\024\ufff1" +
    "\030\ufff1\032\ufff1\033\ufff1\034\ufff1\040\ufff1\041\ufff1\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\006\002\004\015\003\001\001\000\006\013" +
    "\011\014\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\030\007\022\012\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\052\007\022\012\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\047\007\022\012\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\035\007\022\012\027\001" +
    "\001\000\002\001\001\000\010\006\046\007\022\012\027" +
    "\001\001\000\010\006\045\007\022\012\027\001\001\000" +
    "\010\006\044\007\022\012\027\001\001\000\010\006\043" +
    "\007\022\012\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\056\001\001\000\002\001\001\000\004\004\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\063" +
    "\007\022\012\027\001\001\000\002\001\001\000\010\006" +
    "\065\007\022\012\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\070\001\001\000\006\013\011\014" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\074\001\001\000\006\013\011\014\015\001\001\000" +
    "\002\001\001\000\006\013\077\014\015\001\001\000\010" +
    "\006\100\007\022\012\027\001\001\000\002\001\001\000" +
    "\006\013\102\014\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\105\001\001\000\006\013\011\014" +
    "\015\001\001\000\002\001\001\000\010\006\110\007\022" +
    "\012\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\113\007\022\012\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\116\001\001\000\006\013" +
    "\011\014\015\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int count=1;
  static  Map<Integer, IStmt> map = new HashMap<Integer, IStmt>();
  public boolean syntaxErrors;


  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }

  public static void main(String[] args) throws Exception {
        // initialize the symbol factory
        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        // create a buffering scanner wrapper
        ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(args[0])),csf));
        // start parsing
        Parser p = new Parser(lexer,csf);

        //XMLElement e = (XMLElement)p.parse().value;
        System.out.println("aici");
        System.out.println(p.parse().value);

        /*for (XMLElement el: SyntaxTreeXPath.query(args[2],e)){
        	  System.out.println(el.getTagname());
        }


        TestVisitor t = new TestVisitor();
        SyntaxTreeDFS.dfs(e,t);

        // create XML output file
        XMLOutputFactory outFactory = XMLOutputFactory.newInstance();
        XMLStreamWriter sw = outFactory.createXMLStreamWriter(new FileOutputStream(args[1]),"UTF-8");
        // dump XML output to the file
        XMLElement.dump(lexer,sw,e,"expr","stmt");

         // transform the parse tree into an AST and a rendered HTML version
        Transformer transformer = TransformerFactory.newInstance()
  	    .newTransformer(new StreamSource(new File("tree.xsl")));
        Source text = new StreamSource(new File(args[1]));
        transformer.transform(text, new StreamResult(new File("output.xml")));
        transformer = TransformerFactory.newInstance()
  	    .newTransformer(new StreamSource(new File("tree-view.xsl")));
        text = new StreamSource(new File("output.xml"));
        transformer.transform(text, new StreamResult(new File("ast.html"))); */
    }

    public synchronized static Object parse(String arg) throws Exception {
            // initialize the symbol factory
            ComplexSymbolFactory csf = new ComplexSymbolFactory();
            // create a buffering scanner wrapper
            ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(arg)),csf));
            // start parsing
            Parser p = new Parser(lexer,csf);

            //XMLElement e = (XMLElement)p.parse().value;
            System.out.println("aici");
            map = new HashMap<Integer, IStmt>();
            Object res=p.parse().value;
            System.out.println("res:"+res+"res_printed");
            return map;

        }
        /*logicexpr1::= BOOLCONST:c
            {: RESULT = new ValueExp(new BoolValue(c));  : }
            |  IDENT:i
            {: RESULT = new VarExp(i); : }
            | LPAR logicexpr:e RPAR
            {: RESULT = e; : }
            | expr:e1 COMP:op expr:e2
            {: //| expr:e1 COMP:op expr:e2 RESULT = new RelationalExp(op,e1,e2);
             : }
            ;*/




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtlist 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<List<IStmt>,List<IStmt>> s = (Pair<List<IStmt>,List<IStmt>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("before"+map+"after");
     RESULT = s.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decllist ::= decl decllist 
            {
              String RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Pair<List<IStmt>,List<IStmt>> d = (Pair<List<IStmt>,List<IStmt>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String dl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    dl+=d; RESULT = dl;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decllist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decllist ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decllist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= TYPE assignment identlist SEMICOLON 
            {
              Pair<List<IStmt>,List<IStmt>> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Pair<String,Exp> i = (Pair<String,Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Pair<String,Exp>> il = (List<Pair<String,Exp>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    IStmt decl_stmt,assign_stmt ;
    Pair<List<IStmt>, List<IStmt>> res = new Pair<>(new ArrayList<IStmt>(),
                                                new ArrayList<IStmt>());
    decl_stmt = new VarDeclStmt(i.getKey(),new IntType(),count,ixleft.getLine());
    res.getKey().add(decl_stmt);
    res.getValue().add(decl_stmt);
    map.put(count,decl_stmt);
    count++;
    if(i.getValue()!=null){
        assign_stmt = new AssignStmt(i.getKey(),(Exp)i.getValue(),count,ixleft.getLine());
        res.getKey().add(assign_stmt);
        res.getValue().add(assign_stmt);
        map.put(count,assign_stmt);
        count++;
    }

    for(Pair<String,Exp> elem : il){
        decl_stmt = new VarDeclStmt(elem.getKey(),new IntType(),count,ixleft.getLine());
        res.getKey().add(decl_stmt);
        res.getValue().add(decl_stmt);
        map.put(count,decl_stmt);
        count++;
        if(elem.getValue()!=null){
            assign_stmt = new AssignStmt(elem.getKey(),(Exp)elem.getValue(),count,ixleft.getLine());
            res.getKey().add(assign_stmt);
            res.getValue().add(assign_stmt);
            map.put(count,assign_stmt);
            count++;
        }
    }

    RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // assignment ::= IDENT ASSIGN expr 
            {
              Pair<String,Exp> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
     RESULT = new Pair<String,Exp>(i,e);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // assignment ::= IDENT 
            {
              Pair<String,Exp> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new Pair<String,Exp>(i,null);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // identlist ::= identlist COMMA assignment 
            {
              List<Pair<String,Exp>> RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Pair<String,Exp>> il = (List<Pair<String,Exp>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<String,Exp> i = (Pair<String,Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 il.add(i); RESULT = il; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // identlist ::= 
            {
              List<Pair<String,Exp>> RESULT =null;
		 RESULT = new ArrayList<Pair<String,Exp>>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmtlist ::= stmtlist stmt 
            {
              Pair<List<IStmt>,List<IStmt>> RESULT =null;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Pair<List<IStmt>,List<IStmt>> sl = (Pair<List<IStmt>,List<IStmt>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<List<IStmt>,List<IStmt>> s = (Pair<List<IStmt>,List<IStmt>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sl.getKey().addAll(s.getKey()); sl.getValue().addAll(s.getValue()); RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmtlist ::= 
            {
              Pair<List<IStmt>,List<IStmt>> RESULT =null;
		 RESULT = new Pair<List<IStmt>,List<IStmt>>(new ArrayList<IStmt>(),new ArrayList<IStmt>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= SEMICOLON 
            {
              Pair<List<IStmt>,List<IStmt>> RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= decl 
            {
              Pair<List<IStmt>,List<IStmt>> RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<List<IStmt>,List<IStmt>> d = (Pair<List<IStmt>,List<IStmt>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      /*
      List<IStmt> direct_children = new ArrayList<IStmt>();
      List<IStmt> all_children = new ArrayList<IStmt>();
      Pair<List<IStmt>, List<IStmt>> res = new Pair<>(direct_children, all_children);
      */
      RESULT=d;

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= IDENT ASSIGN expr SEMICOLON 
            {
              Pair<List<IStmt>,List<IStmt>> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 //System.out.println("new AssignStmt(\""+i+"\","+ e +","+count+","+ixleft.getLine()+")},";
     map.put(count,new AssignStmt(i,(Exp)e,count,ixleft.getLine()));

     IStmt stmt = new AssignStmt(i,(Exp)e,count,ixleft.getLine());
     Pair<List<IStmt>, List<IStmt>> res = new Pair<>(new ArrayList<IStmt>(Arrays.asList(stmt)),
                                            new ArrayList<IStmt>(Arrays.asList(stmt)));
     System.out.println("new AssignStmt(\""+i+"\","+ e +","+count+","+ixleft.getLine()+")},");
     RESULT = res;
     count++;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= IF LPAR expr RPAR BEGIN stmtlist END 
            {
              Pair<List<IStmt>,List<IStmt>> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location sl1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sl1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Pair<List<IStmt>,List<IStmt>> sl1 = (Pair<List<IStmt>,List<IStmt>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
           //System.out.println("sl1.getValue():"+sl1.getValue());
           for(IStmt stmt : sl1.getValue()){

               int newStatementNumber=stmt.getStatementNumber()+1;
               System.out.println("stmt.getStatementNumber():"+stmt.getStatementNumber());
               stmt.setStatementNumber(newStatementNumber);
               System.out.println("stmt.getStatementNumber():"+stmt.getStatementNumber());
               map.put(newStatementNumber,stmt);
               System.out.println(stmt+"with number"+newStatementNumber);

           }

          System.out.println("sl1"+sl1);
          //System.out.println("sl2"+sl2);

          List<IStmt> direct_children = new ArrayList<IStmt>();
          List<IStmt> all_children = new ArrayList<IStmt>();

          //Pair<List<IStmt>, List<IStmt>> pair = new Pair<>(1, "One");

          System.out.println("This is sl1.getKey():"+sl1.getKey());
          List<IStmt> empty_list = new ArrayList<IStmt>();
          IfStmt if_stmt = new IfStmt((Exp)e,sl1.getKey(),empty_list,count-sl1.getValue().size(),sl1.getValue().size());
          //if_stmt.setNextInstruction(count+1);
          System.out.println("if_stmt.setNextInstruction is: "+(count+1));
          direct_children.add(if_stmt);
          all_children.add(if_stmt);
          all_children.addAll(sl1.getValue());


            System.out.println("count in if"+count);

           Pair<List<IStmt>, List<IStmt>> res = new Pair<>(direct_children, all_children);

           System.out.println("Pair<List<IStmt>, List<IStmt>> res = "+res);
           RESULT = res;
           map.put(count-sl1.getValue().size(),if_stmt);
           count++;
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= IF LPAR expr RPAR BEGIN stmtlist END ELSE BEGIN stmtlist END 
            {
              Pair<List<IStmt>,List<IStmt>> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		Location sl1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location sl1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Pair<List<IStmt>,List<IStmt>> sl1 = (Pair<List<IStmt>,List<IStmt>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location sl2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sl2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Pair<List<IStmt>,List<IStmt>> sl2 = (Pair<List<IStmt>,List<IStmt>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
       //System.out.println("sl1.getValue():"+sl1.getValue());
       for(IStmt stmt : sl1.getValue()){

           int newStatementNumber=stmt.getStatementNumber()+1;
           System.out.println("stmt.getStatementNumber():"+stmt.getStatementNumber());
           stmt.setStatementNumber(newStatementNumber);
           System.out.println("stmt.getStatementNumber():"+stmt.getStatementNumber());
           map.put(newStatementNumber,stmt);
           System.out.println(stmt+"with number"+newStatementNumber);

       }
       for(IStmt stmt : sl2.getValue()){

          int newStatementNumber=stmt.getStatementNumber()+1;
          System.out.println("stmt.getStatementNumber():"+stmt.getStatementNumber());
          stmt.setStatementNumber(newStatementNumber);
          System.out.println("stmt.getStatementNumber():"+stmt.getStatementNumber());
          map.put(newStatementNumber,stmt);
          System.out.println(stmt+"with number"+newStatementNumber);

      }


      System.out.println("sl1"+sl1);
      //System.out.println("sl2"+sl2);

      List<IStmt> direct_children = new ArrayList<IStmt>();
      List<IStmt> all_children = new ArrayList<IStmt>();

      System.out.println("This is sl1.getKey():"+sl1.getKey());
      List<IStmt> empty_list = new ArrayList<IStmt>();
      IfStmt if_stmt = new IfStmt((Exp)e,sl1.getKey(),sl2.getKey(),count-sl1.getValue().size()-sl2.getValue().size(),sl1.getValue().size()+sl2.getValue().size());
      //if_stmt.setNextInstruction(count+1);
      System.out.println("if_stmt.setNextInstruction is: "+(count+1));
      direct_children.add(if_stmt);
      all_children.add(if_stmt);
      all_children.addAll(sl1.getValue());
      all_children.addAll(sl2.getValue());


        System.out.println("count in if"+count);

       Pair<List<IStmt>, List<IStmt>> res = new Pair<>(direct_children, all_children);

       System.out.println("Pair<List<IStmt>, List<IStmt>> res = "+res);
       RESULT = res;
       map.put(count-sl1.getValue().size()-sl2.getValue().size(),if_stmt);
       count++;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= WHILE LPAR expr RPAR BEGIN stmtlist END 
            {
              Pair<List<IStmt>,List<IStmt>> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Pair<List<IStmt>,List<IStmt>> sl = (Pair<List<IStmt>,List<IStmt>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

        for(IStmt stmt : sl.getValue()){
            int newStatementNumber=stmt.getStatementNumber()+1;
            stmt.setStatementNumber(newStatementNumber);
            map.put(newStatementNumber,stmt);
        }

          List<IStmt> direct_children = new ArrayList<IStmt>();
          List<IStmt> all_children = new ArrayList<IStmt>();

          WhileStmt while_stmt = new WhileStmt((Exp)e,sl.getKey(),count-sl.getValue().size(),sl.getValue().size());
          direct_children.add(while_stmt);
          all_children.add(while_stmt);
          all_children.addAll(sl.getValue());

        Pair<List<IStmt>, List<IStmt>> res = new Pair<>(direct_children, all_children);

        RESULT = res;


        map.put(count-sl.getValue().size(), while_stmt);
        count++;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= FOR LPAR stmt expr SEMICOLON stmt RPAR BEGIN stmtlist END 
            {
              Pair<List<IStmt>,List<IStmt>> RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		Pair<List<IStmt>,List<IStmt>> s1 = (Pair<List<IStmt>,List<IStmt>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location s3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location s3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Pair<List<IStmt>,List<IStmt>> s3 = (Pair<List<IStmt>,List<IStmt>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Pair<List<IStmt>,List<IStmt>> sl = (Pair<List<IStmt>,List<IStmt>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

        /*for(IStmt stmt : sl.getValue()){
            int newStatementNumber=stmt.getStatementNumber()+1;
            stmt.setStatementNumber(newStatementNumber);
            map.put(newStatementNumber,stmt);
        }*/

          List<IStmt> direct_children = new ArrayList<IStmt>();
          List<IStmt> all_children = new ArrayList<IStmt>();

          sl.getKey().addAll(s3.getKey()); // s3 becomes part of while statement (last statement in while)
          sl.getValue().addAll(s3.getValue());
          WhileStmt while_stmt = new WhileStmt((Exp)e,sl.getKey(),count-sl.getValue().size(),sl.getValue().size());
          direct_children.addAll(s1.getKey());
          direct_children.add(while_stmt);
          all_children.addAll(s1.getValue());
          all_children.add(while_stmt);
          all_children.addAll(sl.getValue());

        Pair<List<IStmt>, List<IStmt>> res = new Pair<>(direct_children, all_children);

        RESULT = res;

        System.out.println("count-sl.getValue().size():"+(count-sl.getValue().size()));

        s3.getKey().get(0).setStatementNumber(s3.getKey().get(0).getStatementNumber() + sl.getValue().size());
        map.put(s3.getKey().get(0).getStatementNumber(), s3.getKey().get(0));


        map.put(count-sl.getValue().size(), while_stmt);
        System.out.println("map in for stmt:"+map);
        count++;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= PRINT LPAR expr RPAR SEMICOLON 
            {
              Pair<List<IStmt>,List<IStmt>> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 //System.out.println("new AssignStmt(\""+i+"\","+ e +","+count+","+ixleft.getLine()+")},";
       map.put(count,new PrintStmt((Exp)e,count));
       IStmt stmt = new PrintStmt((Exp)e,count);
       Pair<List<IStmt>, List<IStmt>> res = new Pair<>(new ArrayList<IStmt>(Arrays.asList(stmt)),
                                                   new ArrayList<IStmt>(Arrays.asList(stmt)));
       RESULT = res;
       count++;

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= error 
            {
              Pair<List<IStmt>,List<IStmt>> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.report_error("Syntax error, skipped nonsense",e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // logicexpr ::= BOOLCONST 
            {
              Exp RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("BOOLCONST");
       RESULT = new ValueExp(new BoolValue(c));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // logicexpr ::= expr COMP expr 
            {
              Exp RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("COMP"); RESULT = new RelationalExp(op,e1,e2); //RelationalExp
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stringexp ::= STRINGCONST 
            {
              Exp RESULT =null;
		Location scxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location scxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("STRINGCONST");
      RESULT = new ValueExp(new StringValue(sc));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringexp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= INTCONST 
            {
              Exp RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //System.out.println("new ValueExp(new IntValue("+c+")");
      //RESULT = "new ValueExp(new IntValue("+c+"))";
     RESULT = new ValueExp(new IntValue(c));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= IDENT 
            {
              Exp RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarExp(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= LPAR expr RPAR 
            {
              Exp RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr BINOPPRIORITY1 expr 
            {
              Exp RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		char op = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  System.out.println("BINOP:op"+op);
    RESULT = new ArithExp(op,e1, e2);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr BINOPPRIORITY2 expr 
            {
              Exp RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		char op = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  System.out.println("new ArithExp("+op+","+e1+","+ e2+")");
    RESULT = new ArithExp(op,e1, e2);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= BINOPPRIORITY2 expr 
            {
              Exp RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		char op = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  System.out.println("BINOP:op"+op);
    if(op=='+')
        RESULT = e;
    else if(op=='-')
        RESULT = new ArithExp('*',e, new ValueExp(new IntValue(-1)));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr BBINOP expr 
            {
              Exp RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicExp(op,e1,e2); //LogicExp
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= logicexpr 
            {
              Exp RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("BOOLCONST");
       RESULT = l;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= READ_INTEGER 
            {
              Exp RESULT =null;
		
      RESULT = new GetInput();
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= READ_HEAP LPAR expr RPAR 
            {
              Exp RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new rH(e);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= stringexp 
            {
              Exp RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //System.out.println("stringexp");
        RESULT = s;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
