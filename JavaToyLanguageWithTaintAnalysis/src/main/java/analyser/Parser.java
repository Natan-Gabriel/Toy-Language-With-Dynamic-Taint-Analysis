
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyser;

import model.stmt.*;
import model.exp.*;
import model.types.*;
import model.values.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\006\000\002\005\005" +
    "\000\002\005\002\000\002\014\004\000\002\014\002\000" +
    "\002\013\003\000\002\013\006\000\002\013\005\000\002" +
    "\013\011\000\002\013\015\000\002\013\011\000\002\013" +
    "\014\000\002\013\007\000\002\013\011\000\002\013\007" +
    "\000\002\013\007\000\002\013\003\000\002\007\003\000" +
    "\002\007\005\000\002\012\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\004\000\002\006\005\000\002\006\003" +
    "\000\002\006\003\000\002\006\006\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\034\002\ufffe\003\ufffe\004\ufffe\012\ufffe\014" +
    "\ufffe\015\ufffe\020\ufffe\021\ufffe\022\ufffe\024\ufffe\027\ufffe" +
    "\030\007\033\ufffe\001\002\000\034\002\ufffe\003\ufffe\004" +
    "\ufffe\012\ufffe\014\ufffe\015\ufffe\020\ufffe\021\ufffe\022\ufffe" +
    "\024\ufffe\027\ufffe\030\007\033\ufffe\001\002\000\004\002" +
    "\142\001\002\000\032\002\ufff9\003\ufff9\004\ufff9\012\ufff9" +
    "\014\ufff9\015\ufff9\020\ufff9\021\ufff9\022\ufff9\024\ufff9\027" +
    "\ufff9\033\ufff9\001\002\000\004\033\010\001\002\000\006" +
    "\004\ufffb\005\ufffb\001\002\000\006\004\013\005\012\001" +
    "\002\000\004\033\014\001\002\000\034\002\ufffd\003\ufffd" +
    "\004\ufffd\012\ufffd\014\ufffd\015\ufffd\020\ufffd\021\ufffd\022" +
    "\ufffd\024\ufffd\027\ufffd\030\ufffd\033\ufffd\001\002\000\006" +
    "\004\ufffc\005\ufffc\001\002\000\032\002\001\003\025\004" +
    "\026\012\024\014\016\015\020\020\021\021\031\022\023" +
    "\024\027\027\030\033\017\001\002\000\004\006\134\001" +
    "\002\000\004\026\131\001\002\000\004\006\120\001\002" +
    "\000\004\006\114\001\002\000\034\002\ufffa\003\ufffa\004" +
    "\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\024\ufffa\027\ufffa\033\ufffa\001\002\000\004\006" +
    "\110\001\002\000\004\006\076\001\002\000\054\002\uffed" +
    "\003\uffed\004\uffed\006\uffed\007\uffed\011\uffed\012\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\024\uffed\027\uffed\032\uffed\033\uffed\034\uffed\040\uffed\041" +
    "\uffed\001\002\000\054\002\ufff8\003\ufff8\004\ufff8\006\ufff8" +
    "\007\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\024\ufff8\027\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\040\ufff8\041\ufff8\001\002\000\004\006" +
    "\072\001\002\000\022\006\036\016\040\017\045\032\044" +
    "\033\033\034\035\040\043\041\037\001\002\000\004\006" +
    "\032\001\002\000\022\006\036\016\040\017\045\032\044" +
    "\033\033\034\035\040\043\041\037\001\002\000\020\004" +
    "\uffe8\005\uffe8\007\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\001\002\000\020\004\uffe2\005\uffe2\007\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\001\002\000\020\004\uffea\005\uffea" +
    "\007\uffea\035\uffea\036\uffea\037\uffea\040\uffea\001\002\000" +
    "\022\006\036\016\040\017\045\032\044\033\033\034\035" +
    "\040\043\041\037\001\002\000\020\004\uffec\005\uffec\007" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\uffec\001\002\000\020" +
    "\004\uffe1\005\uffe1\007\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\001\002\000\020\004\uffdf\005\uffdf\007\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\001\002\000\014\005\062\035" +
    "\050\036\052\037\053\040\051\001\002\000\022\006\036" +
    "\016\040\017\045\032\044\033\033\034\035\040\043\041" +
    "\037\001\002\000\020\004\uffe9\005\uffe9\007\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\001\002\000\004\006\046\001" +
    "\002\000\022\006\036\016\040\017\045\032\044\033\033" +
    "\034\035\040\043\041\037\001\002\000\014\007\054\035" +
    "\050\036\052\037\053\040\051\001\002\000\022\006\036" +
    "\016\040\017\045\032\044\033\033\034\035\040\043\041" +
    "\037\001\002\000\022\006\036\016\040\017\045\032\044" +
    "\033\033\034\035\040\043\041\037\001\002\000\022\006" +
    "\036\016\040\017\045\032\044\033\033\034\035\040\043" +
    "\041\037\001\002\000\022\006\036\016\040\017\045\032" +
    "\044\033\033\034\035\040\043\041\037\001\002\000\020" +
    "\004\uffe0\005\uffe0\007\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\001\002\000\020\004\uffe6\005\uffe6\007\uffe6\035\uffe6" +
    "\036\052\037\uffe6\040\uffe6\001\002\000\020\004\uffe3\005" +
    "\uffe3\007\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\001\002" +
    "\000\020\004\uffe5\005\uffe5\007\uffe5\035\uffe5\036\052\037" +
    "\053\040\uffe5\001\002\000\020\004\uffeb\005\uffeb\007\uffeb" +
    "\035\uffeb\036\052\037\053\040\051\001\002\000\020\004" +
    "\uffe4\005\uffe4\007\uffe4\035\uffe4\036\052\037\053\040\uffe4" +
    "\001\002\000\004\033\063\001\002\000\004\007\064\001" +
    "\002\000\004\004\065\001\002\000\054\002\ufff0\003\ufff0" +
    "\004\ufff0\006\ufff0\007\ufff0\011\ufff0\012\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\024\ufff0" +
    "\027\ufff0\032\ufff0\033\ufff0\034\ufff0\040\ufff0\041\ufff0\001" +
    "\002\000\014\007\067\035\050\036\052\037\053\040\051" +
    "\001\002\000\020\004\uffe7\005\uffe7\007\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\001\002\000\014\004\071\035\050" +
    "\036\052\037\053\040\051\001\002\000\054\002\ufff6\003" +
    "\ufff6\004\ufff6\006\ufff6\007\ufff6\011\ufff6\012\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\024" +
    "\ufff6\027\ufff6\032\ufff6\033\ufff6\034\ufff6\040\ufff6\041\ufff6" +
    "\001\002\000\022\006\036\016\040\017\045\032\044\033" +
    "\033\034\035\040\043\041\037\001\002\000\014\007\074" +
    "\035\050\036\052\037\053\040\051\001\002\000\004\004" +
    "\075\001\002\000\054\002\uffee\003\uffee\004\uffee\006\uffee" +
    "\007\uffee\011\uffee\012\uffee\014\uffee\015\uffee\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\024\uffee\027\uffee\032\uffee" +
    "\033\uffee\034\uffee\040\uffee\041\uffee\001\002\000\022\006" +
    "\036\016\040\017\045\032\044\033\033\034\035\040\043" +
    "\041\037\001\002\000\014\007\100\035\050\036\052\037" +
    "\053\040\051\001\002\000\004\010\101\001\002\000\032" +
    "\003\ufff9\004\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\024\ufff9\027\ufff9\033\ufff9\001\002" +
    "\000\032\003\025\004\026\011\103\012\024\014\016\015" +
    "\020\020\021\021\031\022\023\024\027\027\030\033\017" +
    "\001\002\000\056\002\ufff5\003\ufff5\004\ufff5\006\ufff5\007" +
    "\ufff5\011\ufff5\012\ufff5\013\104\014\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\022\ufff5\024\ufff5\027\ufff5\032" +
    "\ufff5\033\ufff5\034\ufff5\040\ufff5\041\ufff5\001\002\000\004" +
    "\010\105\001\002\000\032\003\ufff9\004\ufff9\011\ufff9\012" +
    "\ufff9\014\ufff9\015\ufff9\020\ufff9\021\ufff9\022\ufff9\024\ufff9" +
    "\027\ufff9\033\ufff9\001\002\000\032\003\025\004\026\011" +
    "\107\012\024\014\016\015\020\020\021\021\031\022\023" +
    "\024\027\027\030\033\017\001\002\000\054\002\ufff4\003" +
    "\ufff4\004\ufff4\006\ufff4\007\ufff4\011\ufff4\012\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\024" +
    "\ufff4\027\ufff4\032\ufff4\033\ufff4\034\ufff4\040\ufff4\041\ufff4" +
    "\001\002\000\022\006\036\016\040\017\045\032\044\033" +
    "\033\034\035\040\043\041\037\001\002\000\014\007\112" +
    "\035\050\036\052\037\053\040\051\001\002\000\004\004" +
    "\113\001\002\000\054\002\uffef\003\uffef\004\uffef\006\uffef" +
    "\007\uffef\011\uffef\012\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\024\uffef\027\uffef\032\uffef" +
    "\033\uffef\034\uffef\040\uffef\041\uffef\001\002\000\022\006" +
    "\036\016\040\017\045\032\044\033\033\034\035\040\043" +
    "\041\037\001\002\000\014\007\116\035\050\036\052\037" +
    "\053\040\051\001\002\000\004\004\117\001\002\000\054" +
    "\002\ufff1\003\ufff1\004\ufff1\006\ufff1\007\ufff1\011\ufff1\012" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\024\ufff1\027\ufff1\032\ufff1\033\ufff1\034\ufff1\040" +
    "\ufff1\041\ufff1\001\002\000\030\003\025\004\026\012\024" +
    "\014\016\015\020\020\021\021\031\022\023\024\027\027" +
    "\030\033\017\001\002\000\022\006\036\016\040\017\045" +
    "\032\044\033\033\034\035\040\043\041\037\001\002\000" +
    "\014\004\123\035\050\036\052\037\053\040\051\001\002" +
    "\000\030\003\025\004\026\012\024\014\016\015\020\020" +
    "\021\021\031\022\023\024\027\027\030\033\017\001\002" +
    "\000\004\007\125\001\002\000\004\010\126\001\002\000" +
    "\032\003\ufff9\004\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\024\ufff9\027\ufff9\033\ufff9\001" +
    "\002\000\032\003\025\004\026\011\130\012\024\014\016" +
    "\015\020\020\021\021\031\022\023\024\027\027\030\033" +
    "\017\001\002\000\054\002\ufff2\003\ufff2\004\ufff2\006\ufff2" +
    "\007\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\024\ufff2\027\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\040\ufff2\041\ufff2\001\002\000\022\006" +
    "\036\016\040\017\045\032\044\033\033\034\035\040\043" +
    "\041\037\001\002\000\014\004\133\035\050\036\052\037" +
    "\053\040\051\001\002\000\054\002\ufff7\003\ufff7\004\ufff7" +
    "\006\ufff7\007\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\024\ufff7\027\ufff7" +
    "\032\ufff7\033\ufff7\034\ufff7\040\ufff7\041\ufff7\001\002\000" +
    "\022\006\036\016\040\017\045\032\044\033\033\034\035" +
    "\040\043\041\037\001\002\000\014\007\136\035\050\036" +
    "\052\037\053\040\051\001\002\000\004\010\137\001\002" +
    "\000\032\003\ufff9\004\ufff9\011\ufff9\012\ufff9\014\ufff9\015" +
    "\ufff9\020\ufff9\021\ufff9\022\ufff9\024\ufff9\027\ufff9\033\ufff9" +
    "\001\002\000\032\003\025\004\026\011\141\012\024\014" +
    "\016\015\020\020\021\021\031\022\023\024\027\027\030" +
    "\033\017\001\002\000\054\002\ufff3\003\ufff3\004\ufff3\006" +
    "\ufff3\007\ufff3\011\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\024\ufff3\027\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\040\ufff3\041\ufff3\001\002\000\004" +
    "\002\000\001\002\000\032\002\uffff\003\uffff\004\uffff\012" +
    "\uffff\014\uffff\015\uffff\020\uffff\021\uffff\022\uffff\024\uffff" +
    "\027\uffff\033\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\010\002\004\003\005\004\003\001\001\000" +
    "\006\003\142\004\003\001\001\000\002\001\001\000\004" +
    "\014\014\001\001\000\002\001\001\000\004\005\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\067\007\033\012\040\001\001\000\002\001\001\000" +
    "\010\006\041\007\033\012\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\065\007" +
    "\033\012\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\060\007" +
    "\033\012\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\046\007\033\012\040\001\001\000\002\001" +
    "\001\000\010\006\057\007\033\012\040\001\001\000\010" +
    "\006\056\007\033\012\040\001\001\000\010\006\055\007" +
    "\033\012\040\001\001\000\010\006\054\007\033\012\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\072\007\033\012" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\076\007\033\012\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\101\001\001" +
    "\000\004\013\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\105\001\001\000\004\013\021\001\001" +
    "\000\002\001\001\000\010\006\110\007\033\012\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\114\007\033\012\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\120" +
    "\001\001\000\010\006\121\007\033\012\040\001\001\000" +
    "\002\001\001\000\004\013\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\126\001\001\000\004\013" +
    "\021\001\001\000\002\001\001\000\010\006\131\007\033" +
    "\012\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\134\007\033\012\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\137\001\001\000\004\013" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int count=1;
    static Map<Integer, IStmt> map = new HashMap<Integer, IStmt>();
  public boolean syntaxErrors;


  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }

  public static void main(String[] args) throws Exception {
        // initialize the symbol factory
        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        // create a buffering scanner wrapper
        ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(args[0])),csf));
        // start parsing
        Parser p = new Parser(lexer,csf);

        //XMLElement e = (XMLElement)p.parse().value;
        //System.out.println("aici");
        //System.out.println(p.parse().value);

        /*for (XMLElement el: SyntaxTreeXPath.query(args[2],e)){
        	  System.out.println(el.getTagname());
        }


        TestVisitor t = new TestVisitor();
        SyntaxTreeDFS.dfs(e,t);

        // create XML output file
        XMLOutputFactory outFactory = XMLOutputFactory.newInstance();
        XMLStreamWriter sw = outFactory.createXMLStreamWriter(new FileOutputStream(args[1]),"UTF-8");
        // dump XML output to the file
        XMLElement.dump(lexer,sw,e,"expr","stmt");

         // transform the parse tree into an AST and a rendered HTML version
        Transformer transformer = TransformerFactory.newInstance()
  	    .newTransformer(new StreamSource(new File("tree.xsl")));
        Source text = new StreamSource(new File(args[1]));
        transformer.transform(text, new StreamResult(new File("output.xml")));
        transformer = TransformerFactory.newInstance()
  	    .newTransformer(new StreamSource(new File("tree-view.xsl")));
        text = new StreamSource(new File("output.xml"));
        transformer.transform(text, new StreamResult(new File("ast.html"))); */
    }

    public static Object parse(String arg) throws Exception {
            // initialize the symbol factory
            ComplexSymbolFactory csf = new ComplexSymbolFactory();
            // create a buffering scanner wrapper
            ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(arg)),csf));
            // start parsing
            Parser p = new Parser(lexer,csf);

            //XMLElement e = (XMLElement)p.parse().value;
            //System.out.println("aici");
            Object res=p.parse().value;
            //System.out.println("res:"+res+"res_printed");
            return map;

        }
        /*logicexpr1::= BOOLCONST:c
            {: RESULT = new ValueExp(new BoolValue(c));  : }
            |  IDENT:i
            {: RESULT = new VarExp(i); : }
            | LPAR logicexpr:e RPAR
            {: RESULT = e; : }
            | expr:e1 COMP:op expr:e2
            {: //| expr:e1 COMP:op expr:e2 RESULT = new RelationalExp(op,e1,e2);
             : }
            ;*/




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= decllist stmtlist 
            {
              String RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IStmt> s = (List<IStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //System.out.println("before"+map+"after");
     RESULT = d+s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decllist ::= decl decllist 
            {
              String RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String dl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    dl+=d; RESULT = dl;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decllist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decllist ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decllist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= TYPE IDENT identlist SEMICOLON 
            {
              String RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 //System.out.println(i) ;
    map.put(count,new VarDeclStmt(i,new IntType(),count,ixleft.getLine()));
    String res="";
    res+="{"+count+",new VarDeclStmt(\""+i+"\",new IntType(),"+count+","+ixleft.getLine()+")},";
    count++;
    for(String elem : il){
        map.put(count,new VarDeclStmt(elem,new IntType(),count,ixleft.getLine()));
        res+="{"+count+",new VarDeclStmt(\""+elem+"\",new IntType(),"+count+","+ixleft.getLine()+")},";
        count++;
    }

    RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // identlist ::= identlist COMMA IDENT 
            {
              List<String> RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 il.add(i); RESULT = il; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // identlist ::= 
            {
              List<String> RESULT =null;
		 RESULT = new ArrayList<String>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmtlist ::= stmtlist stmt 
            {
              List<IStmt> RESULT =null;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IStmt> sl = (List<IStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IStmt s = (IStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmtlist ::= 
            {
              List<IStmt> RESULT =null;
		 RESULT = new ArrayList<IStmt>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= SEMICOLON 
            {
              IStmt RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= IDENT ASSIGN expr SEMICOLON 
            {
              IStmt RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 //System.out.println("new AssignStmt(\""+i+"\","+ e +","+count+","+ixleft.getLine()+")},";
     map.put(count,new AssignStmt(i,(Exp)e,count,ixleft.getLine()));
     RESULT = new AssignStmt(i,(Exp)e,count,ixleft.getLine());
     count++;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= GOTO expr SEMICOLON 
            {
              IStmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 //System.out.println("new AssignStmt(\""+i+"\","+ e +","+count+","+ixleft.getLine()+")},";
       map.put(count,new GotoStmt((Exp)e,count));
       RESULT = new GotoStmt((Exp)e,count);
       count++;
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= IF LPAR expr RPAR BEGIN stmtlist END 
            {
              IStmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IStmt> sl = (List<IStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

        for(IStmt stmt : sl){
            int newStatementNumber=stmt.getStatementNumber()+1;
            stmt.setStatementNumber(newStatementNumber);
            map.put(newStatementNumber,stmt);
        }
        RESULT = new IfStmt((Exp)e,sl,new ArrayList<IStmt>(),count-sl.size());
        //System.out.println("count-sl.size()"+(count-sl.size()));
        //System.out.println("count,sl.size()"+count+sl.size());
        map.put(count-sl.size(),new IfStmt((Exp)e,sl,new ArrayList<IStmt>(),count-sl.size()));
        count++;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= IF LPAR expr RPAR BEGIN stmtlist END ELSE BEGIN stmtlist END 
            {
              IStmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		Location sl1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location sl1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		List<IStmt> sl1 = (List<IStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location sl2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sl2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IStmt> sl2 = (List<IStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
       /*map.put(count,new IfStmt((Exp)e,sl1,sl2,count));
       count++;
       RESULT = new IfStmt((Exp)e,sl1,sl2,count); */


       for(IStmt stmt : sl1){
           int newStatementNumber=stmt.getStatementNumber()+1;
           stmt.setStatementNumber(newStatementNumber);
           map.put(newStatementNumber,stmt);
       }
       for(IStmt stmt : sl2){
          int newStatementNumber=stmt.getStatementNumber()+1;
          stmt.setStatementNumber(newStatementNumber);
          map.put(newStatementNumber,stmt);
      }
       RESULT = new IfStmt((Exp)e,sl1,sl2,count-sl1.size()-sl2.size());
       //System.out.println("count-sl.size()"+(count-sl.size()));
       //System.out.println("count,sl.size()"+count+sl.size());
       map.put(count-sl1.size()-sl2.size(),new IfStmt((Exp)e,sl1,sl2,count-sl1.size()-sl2.size()));
       count++;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= WHILE LPAR expr RPAR BEGIN stmtlist END 
            {
              IStmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IStmt> sl = (List<IStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

            for(IStmt stmt : sl){
                int newStatementNumber=stmt.getStatementNumber()+1;
                stmt.setStatementNumber(newStatementNumber);
                map.put(newStatementNumber,stmt);
            }
            RESULT = new WhileStmt((Exp)e,sl,count-sl.size());
            //System.out.println(e);
            //System.out.println(sl);
            //System.out.println("count-sl.size()"+(count-sl.size()));
            //System.out.println("count,sl.size()"+count+sl.size());
            map.put(count-sl.size(), new WhileStmt((Exp)e,sl,count-sl.size()));
            count++;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= FOR LPAR stmt expr SEMICOLON stmt RPAR BEGIN stmtlist END 
            {
              IStmt RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		IStmt s1 = (IStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location s3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location s3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		IStmt s3 = (IStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IStmt> sl = (List<IStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        int newStatementNumber;
        //System.out.println("s1.getStatementNumber()"+s1.getStatementNumber());
        /*for(IStmt stmt : sl){
            newStatementNumber=stmt.getStatementNumber()+1;
            stmt.setStatementNumber(newStatementNumber);
            map.put(newStatementNumber,stmt);
        }*/

        newStatementNumber=s3.getStatementNumber()+1+sl.size();
        s3.setStatementNumber(newStatementNumber);
        map.put(newStatementNumber,s3);

        sl.add(s3);

        RESULT = new WhileStmt((Exp)e,sl,count-sl.size());
        //System.out.println("count-sl.size()"+(count-sl.size()));
        //System.out.println("count,sl.size()"+count+sl.size());
        map.put(count-sl.size(), new WhileStmt((Exp)e,sl,count-sl.size()));
        count++;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= OPEN_FILE LPAR expr RPAR SEMICOLON 
            {
              IStmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 //System.out.println("new AssignStmt(\""+i+"\","+ e +","+count+","+ixleft.getLine()+")},";
           map.put(count,new OpenRFile((Exp)e,count));
           RESULT = new OpenRFile((Exp)e,count);
           count++;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= READ_FILE LPAR expr COMMA IDENT RPAR SEMICOLON 
            {
              IStmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 //System.out.println("new AssignStmt(\""+i+"\","+ e +","+count+","+ixleft.getLine()+")},";
       map.put(count,new readFile((Exp)e,i,count));
       RESULT = new readFile((Exp)e,i,count);
       count++;
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= CLOSE_FILE LPAR expr RPAR SEMICOLON 
            {
              IStmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 //System.out.println("new AssignStmt(\""+i+"\","+ e +","+count+","+ixleft.getLine()+")},";
       map.put(count,new closeRFile((Exp)e,count));
       RESULT = new closeRFile((Exp)e,count);
       count++;
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= PRINT LPAR expr RPAR SEMICOLON 
            {
              IStmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 //System.out.println("new AssignStmt(\""+i+"\","+ e +","+count+","+ixleft.getLine()+")},";
       map.put(count,new PrintStmt((Exp)e,count));
       RESULT = new PrintStmt((Exp)e,count);
       count++;
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= error 
            {
              IStmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.report_error("Syntax error, skipped nonsense",e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // logicexpr ::= BOOLCONST 
            {
              Exp RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("BOOLCONST");
       RESULT = new ValueExp(new BoolValue(c));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // logicexpr ::= expr COMP expr 
            {
              Exp RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //System.out.println("COMP");
    RESULT = new RelationalExp(op,e1,e2); //RelationalExp
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stringexp ::= STRINGCONST 
            {
              Exp RESULT =null;
		Location scxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location scxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //System.out.println("STRINGCONST");
      RESULT = new ValueExp(new StringValue(sc));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringexp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= INTCONST 
            {
              Exp RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //System.out.println("new ValueExp(new IntValue("+c+")");
      //RESULT = "new ValueExp(new IntValue("+c+"))";
     RESULT = new ValueExp(new IntValue(c));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= IDENT 
            {
              Exp RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarExp(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= LPAR expr RPAR 
            {
              Exp RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr BINOPPRIORITY1 expr 
            {
              Exp RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		char op = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  //System.out.println("BINOP:op"+op);
    RESULT = new ArithExp(op,e1, e2);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr BINOPPRIORITY2 expr 
            {
              Exp RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		char op = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  //System.out.println("BINOP:op"+op);
    RESULT = new ArithExp(op,e1, e2);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= BINOPPRIORITY2 expr 
            {
              Exp RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		char op = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  //System.out.println("BINOP:op"+op);
    if(op=='+')
        RESULT = e;
    else if(op=='-')
        RESULT = new ArithExp('*',e, new ValueExp(new IntValue(-1)));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr BBINOP expr 
            {
              Exp RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicExp(op,e1,e2); //LogicExp
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= logicexpr 
            {
              Exp RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //System.out.println("BOOLCONST");
       RESULT = l;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= READ_INTEGER 
            {
              Exp RESULT =null;
		
      RESULT = new GetInput();
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= READ_HEAP LPAR expr RPAR 
            {
              Exp RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new rH(e);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= stringexp 
            {
              Exp RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //System.out.println("stringexp");
        RESULT = s;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
