
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyser;

import model.stmt.*;
import model.exp.*;
import model.types.*;
import model.values.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
import javafx.util.Pair;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\014\006\000\002\004\005" +
    "\000\002\004\003\000\002\005\005\000\002\005\002\000" +
    "\002\015\004\000\002\015\002\000\002\013\003\000\002" +
    "\013\003\000\002\013\006\000\002\013\011\000\002\013" +
    "\015\000\002\013\007\000\002\013\003\000\002\007\003" +
    "\000\002\007\005\000\002\012\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\004\000\002\006\005\000\002\006" +
    "\003\000\002\006\003\000\002\006\006\000\002\006\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\020\002\ufff7\003\ufff7\004\ufff7\012\ufff7\024" +
    "\ufff7\030\ufff7\033\ufff7\001\002\000\020\002\001\003\012" +
    "\004\011\012\015\024\010\030\016\033\014\001\002\000" +
    "\004\002\006\001\002\000\004\002\000\001\002\000\022" +
    "\002\ufff5\003\ufff5\004\ufff5\011\ufff5\012\ufff5\024\ufff5\030" +
    "\ufff5\033\ufff5\001\002\000\004\006\074\001\002\000\022" +
    "\002\ufff6\003\ufff6\004\ufff6\011\ufff6\012\ufff6\024\ufff6\030" +
    "\ufff6\033\ufff6\001\002\000\022\002\ufff0\003\ufff0\004\ufff0" +
    "\011\ufff0\012\ufff0\024\ufff0\030\ufff0\033\ufff0\001\002\000" +
    "\022\002\ufff8\003\ufff8\004\ufff8\011\ufff8\012\ufff8\024\ufff8" +
    "\030\ufff8\033\ufff8\001\002\000\004\026\071\001\002\000" +
    "\004\006\057\001\002\000\004\033\017\001\002\000\010" +
    "\004\ufffb\005\ufffb\026\025\001\002\000\006\004\ufff9\005" +
    "\ufff9\001\002\000\006\004\023\005\022\001\002\000\004" +
    "\033\017\001\002\000\022\002\ufffd\003\ufffd\004\ufffd\011" +
    "\ufffd\012\ufffd\024\ufffd\030\ufffd\033\ufffd\001\002\000\006" +
    "\004\ufffa\005\ufffa\001\002\000\022\006\031\016\033\017" +
    "\040\032\037\033\026\034\030\040\036\041\032\001\002" +
    "\000\020\004\uffeb\005\uffeb\007\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\001\002\000\020\004\uffe5\005\uffe5\007\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\001\002\000\020\004" +
    "\uffed\005\uffed\007\uffed\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\001\002\000\022\006\031\016\033\017\040\032\037\033" +
    "\026\034\030\040\036\041\032\001\002\000\020\004\uffef" +
    "\005\uffef\007\uffef\035\uffef\036\uffef\037\uffef\040\uffef\001" +
    "\002\000\020\004\uffe4\005\uffe4\007\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\001\002\000\020\004\uffe2\005\uffe2\007" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\001\002\000\016" +
    "\004\ufffc\005\ufffc\035\043\036\046\037\045\040\044\001" +
    "\002\000\022\006\031\016\033\017\040\032\037\033\026" +
    "\034\030\040\036\041\032\001\002\000\020\004\uffec\005" +
    "\uffec\007\uffec\035\uffec\036\uffec\037\uffec\040\uffec\001\002" +
    "\000\004\006\041\001\002\000\022\006\031\016\033\017" +
    "\040\032\037\033\026\034\030\040\036\041\032\001\002" +
    "\000\014\007\047\035\043\036\046\037\045\040\044\001" +
    "\002\000\022\006\031\016\033\017\040\032\037\033\026" +
    "\034\030\040\036\041\032\001\002\000\022\006\031\016" +
    "\033\017\040\032\037\033\026\034\030\040\036\041\032" +
    "\001\002\000\022\006\031\016\033\017\040\032\037\033" +
    "\026\034\030\040\036\041\032\001\002\000\022\006\031" +
    "\016\033\017\040\032\037\033\026\034\030\040\036\041" +
    "\032\001\002\000\020\004\uffe3\005\uffe3\007\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\001\002\000\020\004\uffe6\005" +
    "\uffe6\007\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\001\002" +
    "\000\020\004\uffe9\005\uffe9\007\uffe9\035\uffe9\036\046\037" +
    "\uffe9\040\uffe9\001\002\000\020\004\uffe8\005\uffe8\007\uffe8" +
    "\035\uffe8\036\046\037\045\040\uffe8\001\002\000\020\004" +
    "\uffee\005\uffee\007\uffee\035\uffee\036\046\037\045\040\044" +
    "\001\002\000\020\004\uffe7\005\uffe7\007\uffe7\035\uffe7\036" +
    "\046\037\045\040\uffe7\001\002\000\014\007\056\035\043" +
    "\036\046\037\045\040\044\001\002\000\020\004\uffea\005" +
    "\uffea\007\uffea\035\uffea\036\uffea\037\uffea\040\uffea\001\002" +
    "\000\022\006\031\016\033\017\040\032\037\033\026\034" +
    "\030\040\036\041\032\001\002\000\014\007\061\035\043" +
    "\036\046\037\045\040\044\001\002\000\004\010\062\001" +
    "\002\000\020\003\ufff7\004\ufff7\011\ufff7\012\ufff7\024\ufff7" +
    "\030\ufff7\033\ufff7\001\002\000\020\003\012\004\011\011" +
    "\064\012\015\024\010\030\016\033\014\001\002\000\024" +
    "\002\ufff3\003\ufff3\004\ufff3\011\ufff3\012\ufff3\013\065\024" +
    "\ufff3\030\ufff3\033\ufff3\001\002\000\004\010\066\001\002" +
    "\000\020\003\ufff7\004\ufff7\011\ufff7\012\ufff7\024\ufff7\030" +
    "\ufff7\033\ufff7\001\002\000\020\003\012\004\011\011\070" +
    "\012\015\024\010\030\016\033\014\001\002\000\022\002" +
    "\ufff2\003\ufff2\004\ufff2\011\ufff2\012\ufff2\024\ufff2\030\ufff2" +
    "\033\ufff2\001\002\000\022\006\031\016\033\017\040\032" +
    "\037\033\026\034\030\040\036\041\032\001\002\000\014" +
    "\004\073\035\043\036\046\037\045\040\044\001\002\000" +
    "\022\002\ufff4\003\ufff4\004\ufff4\011\ufff4\012\ufff4\024\ufff4" +
    "\030\ufff4\033\ufff4\001\002\000\022\006\031\016\033\017" +
    "\040\032\037\033\026\034\030\040\036\041\032\001\002" +
    "\000\014\007\076\035\043\036\046\037\045\040\044\001" +
    "\002\000\004\004\077\001\002\000\022\002\ufff1\003\ufff1" +
    "\004\ufff1\011\ufff1\012\ufff1\024\ufff1\030\ufff1\033\ufff1\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\006\002\004\015\003\001\001\000\006\013" +
    "\012\014\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\017\001\001\000\002\001\001\000" +
    "\004\005\020\001\001\000\002\001\001\000\004\004\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\034\007\026\012\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\054\007\026\012" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\053\007\026\012" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\041\007\026\012\033\001\001\000\002\001\001\000" +
    "\010\006\052\007\026\012\033\001\001\000\010\006\051" +
    "\007\026\012\033\001\001\000\010\006\050\007\026\012" +
    "\033\001\001\000\010\006\047\007\026\012\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\057\007\026\012" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\062\001\001\000\006\013\012\014\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\066\001\001" +
    "\000\006\013\012\014\006\001\001\000\002\001\001\000" +
    "\010\006\071\007\026\012\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\074\007\026\012\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  static int count=0;
  static  Map<Integer, IStmt> map = new HashMap<Integer, IStmt>();
  static List<IStmt> list= new ArrayList<IStmt>();

  public boolean syntaxErrors;


  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }

  public static void main(String[] args) throws Exception {
        // initialize the symbol factory
        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        // create a buffering scanner wrapper
        ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(args[0])),csf));
        // start parsing
        Parser p = new Parser(lexer,csf);

        //XMLElement e = (XMLElement)p.parse().value;
        System.out.println("aici");
        System.out.println(p.parse().value);

        /*for (XMLElement el: SyntaxTreeXPath.query(args[2],e)){
        	  System.out.println(el.getTagname());
        }


        TestVisitor t = new TestVisitor();
        SyntaxTreeDFS.dfs(e,t);

        // create XML output file
        XMLOutputFactory outFactory = XMLOutputFactory.newInstance();
        XMLStreamWriter sw = outFactory.createXMLStreamWriter(new FileOutputStream(args[1]),"UTF-8");
        // dump XML output to the file
        XMLElement.dump(lexer,sw,e,"expr","stmt");

         // transform the parse tree into an AST and a rendered HTML version
        Transformer transformer = TransformerFactory.newInstance()
  	    .newTransformer(new StreamSource(new File("tree.xsl")));
        Source text = new StreamSource(new File(args[1]));
        transformer.transform(text, new StreamResult(new File("output.xml")));
        transformer = TransformerFactory.newInstance()
  	    .newTransformer(new StreamSource(new File("tree-view.xsl")));
        text = new StreamSource(new File("output.xml"));
        transformer.transform(text, new StreamResult(new File("ast.html"))); */
    }

    public static void constructMap(){
        int aux = count;
        while (aux>=1){
            if(list.get(aux-1) instanceof IfStmt){
                IfStmt stmt = (IfStmt)list.get(aux-1);
                map.put(aux - stmt.getTotalLength(),stmt);
                System.out.println("stmt.getTotalLength():"+stmt.getTotalLength());
                for(int i=1;i<=stmt.getTotalLength();i++){
                    map.put(aux - stmt.getTotalLength()+i,list.get(aux-stmt.getTotalLength()+i-2));
                }
                aux-=stmt.getTotalLength();
                aux--;
            }
            else{
                map.put(aux,list.get(aux-1));
                aux--;
            }

        }
    }

    public synchronized static Object parse(String arg) throws Exception {
            // initialize the symbol factory
            ComplexSymbolFactory csf = new ComplexSymbolFactory();
            // create a buffering scanner wrapper
            ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(arg)),csf));
            // start parsing
            Parser p = new Parser(lexer,csf);

            //XMLElement e = (XMLElement)p.parse().value;
            System.out.println("aici");
            map = new HashMap<Integer, IStmt>();
            Object res=p.parse().value;
            System.out.println("res:"+res+"res_printed");
            constructMap();
            System.out.println("list:"+list+"list_printed");
            System.out.println("map:"+map+"map_printed");
            System.out.println("count:"+count+"count_printed");

            return map;

        }
        /*logicexpr1::= BOOLCONST:c
            {: RESULT = new ValueExp(new BoolValue(c));  : }
            |  IDENT:i
            {: RESULT = new VarExp(i); : }
            | LPAR logicexpr:e RPAR
            {: RESULT = e; : }
            | expr:e1 COMP:op expr:e2
            {: //| expr:e1 COMP:op expr:e2 RESULT = new RelationalExp(op,e1,e2);
             : }
            ;*/




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtlist 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IStmt> s = (List<IStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("before"+map+"after");
     RESULT = s.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decllist ::= decl decllist 
            {
              String RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IStmt> d = (List<IStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String dl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    dl+=d; RESULT = dl;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decllist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decllist ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decllist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= TYPE assignment identlist SEMICOLON 
            {
              List<IStmt> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Pair<String,Exp> i = (Pair<String,Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Pair<String,Exp>> il = (List<Pair<String,Exp>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    IStmt decl_stmt,assign_stmt ;
    List<IStmt> res = new ArrayList<IStmt>();
    decl_stmt = new VarDeclStmt(i.getKey(),new IntType(),count,ixleft.getLine());
    res.add(decl_stmt);
    list.add(decl_stmt);
    count++;


    for(Pair<String,Exp> elem : il){
        decl_stmt = new VarDeclStmt(elem.getKey(),new IntType(),count,ixleft.getLine());
        res.add(decl_stmt);
        list.add(decl_stmt);
        count++;
        if(elem.getValue()!=null){
            assign_stmt = new AssignStmt(elem.getKey(),(Exp)elem.getValue(),count,ixleft.getLine());
            res.add(assign_stmt);
            list.add(assign_stmt);
            count++;
        }
    }

    if(i.getValue()!=null){
            assign_stmt = new AssignStmt(i.getKey(),(Exp)i.getValue(),count,ixleft.getLine());
            res.add(assign_stmt);
            list.add(assign_stmt);
            count++;
    }

    RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // assignment ::= IDENT ASSIGN expr 
            {
              Pair<String,Exp> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
     RESULT = new Pair<String,Exp>(i,e);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // assignment ::= IDENT 
            {
              Pair<String,Exp> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new Pair<String,Exp>(i,null);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // identlist ::= identlist COMMA assignment 
            {
              List<Pair<String,Exp>> RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Pair<String,Exp>> il = (List<Pair<String,Exp>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<String,Exp> i = (Pair<String,Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 il.add(i); RESULT = il; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // identlist ::= 
            {
              List<Pair<String,Exp>> RESULT =null;
		 RESULT = new ArrayList<Pair<String,Exp>>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmtlist ::= stmtlist stmt 
            {
              List<IStmt> RESULT =null;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IStmt> sl = (List<IStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IStmt> s = (List<IStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sl.addAll(s); RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmtlist ::= 
            {
              List<IStmt> RESULT =null;
		 RESULT = new ArrayList<IStmt>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= SEMICOLON 
            {
              List<IStmt> RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= decl 
            {
              List<IStmt> RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IStmt> d = (List<IStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= IDENT ASSIGN expr SEMICOLON 
            {
              List<IStmt> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
           IStmt stmt = new AssignStmt(i,(Exp)e,count,ixleft.getLine());
           list.add(stmt);
           count++;
           RESULT = new ArrayList<IStmt>(Arrays.asList(stmt));
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= IF LPAR expr RPAR BEGIN stmtlist END 
            {
              List<IStmt> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location sl1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sl1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IStmt> sl1 = (List<IStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location endxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location endxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          IStmt stmt = new IfStmt((Exp)e,sl1,new ArrayList<IStmt>(),sxleft.getLine(),endxright.getLine());
          list.add(stmt);
          count++;
          RESULT = Arrays.asList(stmt);
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= IF LPAR expr RPAR BEGIN stmtlist END ELSE BEGIN stmtlist END 
            {
              List<IStmt> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		Location sl1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location sl1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		List<IStmt> sl1 = (List<IStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location sl2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sl2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IStmt> sl2 = (List<IStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location endxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location endxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           IStmt stmt = new IfStmt((Exp)e,sl1,sl2,sxleft.getLine(),endxright.getLine());
           list.add(stmt);
           count++;
           RESULT = Arrays.asList(stmt);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= PRINT LPAR expr RPAR SEMICOLON 
            {
              List<IStmt> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
       IStmt stmt = new PrintStmt((Exp)e,sxleft.getLine());
       list.add(stmt);
       count++;
       RESULT = Arrays.asList(stmt);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= error 
            {
              List<IStmt> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.report_error("Syntax error, skipped nonsense",e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // logicexpr ::= BOOLCONST 
            {
              Exp RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("BOOLCONST");
       RESULT = new ValueExp(new BoolValue(c));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // logicexpr ::= expr COMP expr 
            {
              Exp RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("COMP"); RESULT = new RelationalExp(op,e1,e2); //RelationalExp
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stringexp ::= STRINGCONST 
            {
              Exp RESULT =null;
		Location scxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location scxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("STRINGCONST");
      RESULT = new ValueExp(new StringValue(sc));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringexp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= INTCONST 
            {
              Exp RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //System.out.println("new ValueExp(new IntValue("+c+")");
      //RESULT = "new ValueExp(new IntValue("+c+"))";
     RESULT = new ValueExp(new IntValue(c));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= IDENT 
            {
              Exp RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarExp(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= LPAR expr RPAR 
            {
              Exp RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr BINOPPRIORITY1 expr 
            {
              Exp RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		char op = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  System.out.println("BINOP:op"+op);
    RESULT = new ArithExp(op,e1, e2);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr BINOPPRIORITY2 expr 
            {
              Exp RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		char op = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  System.out.println("new ArithExp("+op+","+e1+","+ e2+")");
    RESULT = new ArithExp(op,e1, e2);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= BINOPPRIORITY2 expr 
            {
              Exp RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		char op = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  System.out.println("BINOP:op"+op);
    if(op=='+')
        RESULT = e;
    else if(op=='-')
        RESULT = new ArithExp('*',e, new ValueExp(new IntValue(-1)));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr BBINOP expr 
            {
              Exp RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicExp(op,e1,e2); //LogicExp
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= logicexpr 
            {
              Exp RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("BOOLCONST");
       RESULT = l;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= READ_INTEGER 
            {
              Exp RESULT =null;
		
      RESULT = new GetInput();
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= READ_HEAP LPAR expr RPAR 
            {
              Exp RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new rH(e);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= stringexp 
            {
              Exp RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //System.out.println("stringexp");
        RESULT = s;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
